name: Nginx Compilation Test

on:
  pull_request:
    # Run on all pull requests for comprehensive nginx testing
    # Specific path triggers maintained for push events to optimize CI usage
  push:
    branches:
      - main
    paths:
      - 'scripts/install/nginx/**'
      - 'scripts/install/openssl/**'
      - 'scripts/install/pcre/**'
      - 'scripts/install/zlib/**'
  workflow_dispatch:
    inputs:
      test_cpu_override:
        description: 'Test specific CPU architecture override'
        required: false
        default: ''
        type: string
      test_http3:
        description: 'Test HTTP/3 compilation'
        required: false
        default: true
        type: boolean
      test_matrix:
        description: 'Which test matrix to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - standard-only
          - optimized-only
          - http3-only

permissions:
  contents: read
  pull-requests: write

jobs:
  nginx-compile-matrix:
    name: Nginx Compilation Matrix
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        config: ['standard', 'optimized', 'http3']
        include:
          - config: 'standard'
            description: 'Standard compilation with HTTP/2'
            cpu_override: ''
            enable_http3: false
          - config: 'optimized'
            description: 'Optimized compilation with CPU detection'
            cpu_override: 'native'
            enable_http3: false
          - config: 'http3'
            description: 'HTTP/3 and QUIC compilation test'
            cpu_override: ''
            enable_http3: true
    
    steps:
      - name: Check Matrix Configuration
        id: check-config
        run: |
          SHOULD_RUN="true"
          
          # Check if we should skip this configuration based on workflow input
          if [ "${{ github.event.inputs.test_matrix }}" = "standard-only" ] && [ "${{ matrix.config }}" != "standard" ]; then
            SHOULD_RUN="false"
          elif [ "${{ github.event.inputs.test_matrix }}" = "optimized-only" ] && [ "${{ matrix.config }}" != "optimized" ]; then
            SHOULD_RUN="false"
          elif [ "${{ github.event.inputs.test_matrix }}" = "http3-only" ] && [ "${{ matrix.config }}" != "http3" ]; then
            SHOULD_RUN="false"
          fi
          
          echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT
          echo "Running ${{ matrix.config }} configuration: $SHOULD_RUN"

      - name: Checkout Repository
        if: steps.check-config.outputs.should_run == 'true'
        uses: actions/checkout@v4

      - name: Free Disk Space for Compilation
        if: steps.check-config.outputs.should_run == 'true'
        run: |
          # Free up disk space for Nginx compilation
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          df -h

      - name: Install Build Dependencies
        if: steps.check-config.outputs.should_run == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            wget \
            curl \
            git \
            cmake \
            autoconf \
            automake \
            libtool \
            pkg-config \
            libssl-dev \
            zlib1g-dev \
            libpcre3-dev \
            pwgen \
            boxes \
            ccache \
            ninja-build

      - name: Setup EngineScript Environment
        if: steps.check-config.outputs.should_run == 'true'
        run: |
          # Create EngineScript directory structure
          sudo mkdir -p /usr/local/bin/enginescript
          sudo mkdir -p /home/EngineScript
          sudo mkdir -p /var/log/EngineScript
          sudo mkdir -p /tmp/nginx-build
          
          # Copy all scripts and config files
          sudo cp -r . /usr/local/bin/enginescript/
          sudo cp .github/ci-config/enginescript-install-options-ci.txt /home/EngineScript/enginescript-install-options.txt
          
          # Set proper permissions
          sudo find /usr/local/bin/enginescript -type d,f -exec chmod 755 {} \;
          sudo chown -R root:root /usr/local/bin/enginescript
          sudo find /usr/local/bin/enginescript -type f -iname "*.sh" -exec chmod +x {} \;
          
          # Show system information
          echo "=== System Information ==="
          uname -a
          cat /proc/cpuinfo | grep -E "(model name|flags)" | head -4
          free -h
          df -h

      - name: Run Base EngineScript Installation
        if: steps.check-config.outputs.should_run == 'true'
        run: |
          echo "ÔøΩ Running base EngineScript installation sequence..."
          cd /usr/local/bin/enginescript
          
          # Run setup.sh first
          sudo timeout 300 ./setup.sh 2>&1 | tee /tmp/setup.log || {
            echo "‚ùå Setup script failed"
            tail -50 /tmp/setup.log
            exit 1
          }
          
          # Source variables and set CI mode
          source /usr/local/bin/enginescript/enginescript-variables.txt
          source /home/EngineScript/enginescript-install-options.txt
          export DEBUG_INSTALL=0
          
          cd scripts/install
          
          # Essential base installations for Nginx compilation
          echo "üì¶ Installing repositories..."
          sudo timeout 600 ./repositories/repositories-install.sh 2>/dev/null || echo "‚ö†Ô∏è Repositories step had issues"
          
          echo "üìö Installing dependencies..."
          sudo timeout 900 ./depends/depends-install.sh 2>/dev/null || echo "‚ö†Ô∏è Dependencies step had issues"
          
          echo "ÔøΩ Installing GCC..."
          sudo timeout 600 ./gcc/gcc-install.sh 2>/dev/null || echo "‚ö†Ô∏è GCC step had issues"
          
          echo "üîí Installing OpenSSL..."
          sudo timeout 900 ./openssl/openssl-install.sh 2>/dev/null || echo "‚ö†Ô∏è OpenSSL step had issues"
          
          echo "üìù Installing PCRE..."
          sudo timeout 600 ./pcre/pcre-install.sh 2>/dev/null || echo "‚ö†Ô∏è PCRE step had issues"
          
          echo "ÔøΩ Installing Zlib..."
          sudo timeout 600 ./zlib/zlib-install.sh 2>/dev/null || echo "‚ö†Ô∏è Zlib step had issues"
          
          echo "‚úÖ Base installation sequence completed"

      - name: Verify Dependencies for Nginx
        if: steps.check-config.outputs.should_run == 'true'
        run: |
          echo "üîç Verifying dependencies for Nginx compilation..."
          
          # Verify OpenSSL
          if [ -f /usr/local/ssl/bin/openssl ]; then
            echo "‚úÖ OpenSSL available"
            /usr/local/ssl/bin/openssl version
          else
            echo "‚ùå OpenSSL not found"
            exit 1
          fi
          
          # Verify PCRE2
          if [ -f /usr/local/bin/pcre2-config ]; then
            echo "‚úÖ PCRE2 available"
            /usr/local/bin/pcre2-config --version
          else
            echo "‚ùå PCRE2 not found"
            exit 1
          fi
          
          # Verify Zlib
          if [ -f /usr/local/lib/libz.so ]; then
            echo "‚úÖ Zlib available"
            ls -la /usr/local/lib/libz.*
          else
            echo "‚ùå Zlib not found"
            exit 1
          fi
          
          echo "‚úÖ All dependencies verified"

      - name: Set CPU Override for Testing
        if: matrix.config == 'optimized' || github.event.inputs.test_cpu_override != ''
        run: |
          CPU_OVERRIDE="${{ github.event.inputs.test_cpu_override || matrix.cpu_override }}"
          if [ -n "$CPU_OVERRIDE" ]; then
            echo "Setting CPU override to: $CPU_OVERRIDE"
            # Set environment variable for the nginx compilation
            echo "NGINX_CPU_OVERRIDE=$CPU_OVERRIDE" | sudo tee -a /home/EngineScript/enginescript-install-options.txt
          fi

      - name: Configure HTTP/3 Build
        if: (matrix.config == 'http3' || matrix.enable_http3 == true) && steps.check-config.outputs.should_run == 'true'
        run: |
          echo "üîß Configuring HTTP/3 build environment..."
          
          # Ensure we have the latest OpenSSL for HTTP/3 support
          echo "FORCE_OPENSSL_LATEST=1" | sudo tee -a /home/EngineScript/enginescript-install-options.txt
          
          # Enable HTTP/3 module in configuration
          echo "ENABLE_NGINX_HTTP3=1" | sudo tee -a /home/EngineScript/enginescript-install-options.txt
          
          echo "‚úÖ HTTP/3 build configuration completed"

      - name: Compile Nginx with Configuration
        if: steps.check-config.outputs.should_run == 'true'
        run: |
          echo "üöÄ Compiling Nginx (${{ matrix.description }})..."
          cd /usr/local/bin/enginescript/scripts/install/nginx
          
          # Set compilation timeout to 20 minutes
          sudo timeout 1200 ./nginx-install.sh 2>&1 | tee /tmp/nginx-build.log
          
          # Check compilation result
          if [ $? -eq 0 ] && [ -f /usr/sbin/nginx ]; then
            echo "‚úÖ Nginx compilation successful"
          else
            echo "‚ùå Nginx compilation failed or timed out"
            echo "=== Last 100 lines of build log ==="
            tail -100 /tmp/nginx-build.log
            exit 1
          fi

      - name: Verify Nginx Binary and Configuration
        if: steps.check-config.outputs.should_run == 'true'
        run: |
          echo "üîç Verifying Nginx binary and configuration..."
          
          # Check if binary exists and is executable
          if [ -f /usr/sbin/nginx ] && [ -x /usr/sbin/nginx ]; then
            echo "‚úÖ Nginx binary exists and is executable"
          else
            echo "‚ùå Nginx binary missing or not executable"
            exit 1
          fi
          
          # Get Nginx version and configuration
          echo "=== Nginx Version ==="
          sudo /usr/sbin/nginx -v
          
          echo -e "\n=== Nginx Configuration ==="
          sudo /usr/sbin/nginx -V 2>&1 | tr ' ' '\n' | grep -E '^--'
          
          # Check for key modules
          echo -e "\n=== Module Verification ==="
          sudo /usr/sbin/nginx -V 2>&1 | grep -q "http_ssl_module" && echo "‚úÖ SSL module" || echo "‚ùå SSL module missing"
          sudo /usr/sbin/nginx -V 2>&1 | grep -q "http_v2_module" && echo "‚úÖ HTTP/2 module" || echo "‚ùå HTTP/2 module missing"
          sudo /usr/sbin/nginx -V 2>&1 | grep -q "http_v3_module" && echo "‚úÖ HTTP/3 module" || echo "‚ÑπÔ∏è HTTP/3 module not compiled (may be expected)"
          sudo /usr/sbin/nginx -V 2>&1 | grep -q "http_gzip_module" && echo "‚úÖ Gzip module" || echo "‚ùå Gzip module missing"
          sudo /usr/sbin/nginx -V 2>&1 | grep -q "http_brotli" && echo "‚úÖ Brotli module" || echo "‚ÑπÔ∏è Brotli module not found (may be expected)"
          sudo /usr/sbin/nginx -V 2>&1 | grep -q "http_headers_more" && echo "‚úÖ Headers More module" || echo "‚ùå Headers More module missing"

      - name: Test HTTP/3 and QUIC Features
        if: matrix.config == 'http3' || matrix.enable_http3 == true
        run: |
          echo "üîç Testing HTTP/3 and QUIC specific features..."
          
          # Install SSL certificates for testing
          sudo apt-get install -y ssl-cert
          
          # Verify HTTP/3 module compilation
          NGINX_V_OUTPUT=$(sudo /usr/sbin/nginx -V 2>&1)
          
          if echo "$NGINX_V_OUTPUT" | grep -q "http_v3_module"; then
            echo "‚úÖ HTTP/3 module successfully compiled"
          else
            echo "‚ùå HTTP/3 module missing from compilation"
            echo "Available modules:"
            echo "$NGINX_V_OUTPUT" | grep -o 'with-[^[:space:]]*' | sort
            exit 1
          fi
          
          # Check for QUIC support
          if echo "$NGINX_V_OUTPUT" | grep -q "quic"; then
            echo "‚úÖ QUIC support detected"
          else
            echo "‚ö†Ô∏è QUIC support not explicitly detected"
          fi
          
          # Check for required HTTP/3 dependencies
          echo -e "\n=== HTTP/3 Dependencies Check ==="
          echo "$NGINX_V_OUTPUT" | grep -q "with-openssl" && echo "‚úÖ OpenSSL support" || echo "‚ùå OpenSSL support missing"
          echo "$NGINX_V_OUTPUT" | grep -q "with-http_ssl_module" && echo "‚úÖ SSL module for QUIC" || echo "‚ùå SSL module missing"
          
          # Create log directories for testing
          sudo mkdir -p /var/log/nginx
          
          # Test configuration file with HTTP/3 directives
          echo -e "\n=== HTTP/3 Configuration Test ==="
          cat > /tmp/nginx-http3-test.conf << 'HTTP3CONFIG'
          user www-data;
          worker_processes auto;
          pid /run/nginx.pid;
          
          events {
              worker_connections 1024;
          }
          
          http {
              sendfile on;
              tcp_nopush on;
              tcp_nodelay on;
              keepalive_timeout 65;
              
              include /etc/nginx/mime.types;
              default_type application/octet-stream;
              
              access_log /var/log/nginx/access.log;
              error_log /var/log/nginx/error.log;
              
              server {
                  listen 80;
                  listen 443 ssl http2;
                  listen 443 quic reuseport;
                  server_name example.com;
                  
                  ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
                  ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
                  ssl_protocols TLSv1.2 TLSv1.3;
                  
                  # HTTP/3 and QUIC settings
                  quic_retry on;
                  ssl_early_data on;
                  
                  # HTTP/3 advertisement header
                  add_header Alt-Svc 'h3=":443"; ma=86400' always;
                  
                  location / {
                      return 200 "HTTP/3 test server\\n";
                      add_header Content-Type text/plain;
                  }
              }
          }
          HTTP3CONFIG
          
          # Test the HTTP/3 configuration syntax
          if sudo /usr/sbin/nginx -t -c /tmp/nginx-http3-test.conf; then
            echo "‚úÖ HTTP/3 configuration syntax is valid"
          else
            echo "‚ùå HTTP/3 configuration syntax has errors"
            cat /tmp/nginx-http3-test.conf
            exit 1
          fi
          
          # Test QUIC-specific directives
          echo -e "\n=== QUIC Directives Test ==="
          if grep -q "quic_retry\|quic_gso\|quic_bpf" /usr/local/bin/enginescript/scripts/install/nginx/nginx-tune.sh; then
            echo "‚úÖ QUIC optimization directives found in nginx-tune.sh"
          else
            echo "‚ö†Ô∏è QUIC optimization directives not found"
          fi

      - name: Test Nginx Configuration Syntax
        if: steps.check-config.outputs.should_run == 'true'
        run: |
          echo "üîç Testing Nginx configuration syntax..."
          
          # Create a minimal test configuration
          sudo mkdir -p /etc/nginx/conf.d
          
          # Create nginx configuration file using cat with proper escaping
          cat > /tmp/nginx.conf << 'ENDCONFIG'
          user www-data;
          worker_processes auto;
          pid /run/nginx.pid;
          
          events {
              worker_connections 1024;
          }
          
          http {
              sendfile on;
              tcp_nopush on;
              tcp_nodelay on;
              keepalive_timeout 65;
              types_hash_max_size 2048;
              
              include /etc/nginx/mime.types;
              default_type application/octet-stream;
              
              access_log /var/log/nginx/access.log;
              error_log /var/log/nginx/error.log;
              
              server {
                  listen 80;
                  server_name localhost;
                  root /var/www/html;
                  index index.html;
                  
                  location / {
                      try_files $uri $uri/ =404;
                  }
              }
          }
          ENDCONFIG
          
          # Copy the configuration file to the correct location
          sudo cp /tmp/nginx.conf /etc/nginx/nginx.conf
          
          # Test configuration syntax
          if sudo /usr/sbin/nginx -t; then
            echo "‚úÖ Nginx configuration syntax is valid"
          else
            echo "‚ùå Nginx configuration syntax error"
            exit 1
          fi

      - name: Test Nginx Performance Features
        run: |
          echo "üöÄ Testing Nginx performance features..."
          
          # Check for performance-related compile flags
          echo "=== Performance Features Check ==="
          NGINX_V_OUTPUT=$(sudo /usr/sbin/nginx -V 2>&1)
          
          echo "$NGINX_V_OUTPUT" | grep -q "O2\|O3" && echo "‚úÖ Optimization flags detected" || echo "‚ö†Ô∏è No optimization flags detected"
          echo "$NGINX_V_OUTPUT" | grep -q "native\|march" && echo "‚úÖ CPU-specific optimizations detected" || echo "‚ÑπÔ∏è Generic CPU optimization"
          echo "$NGINX_V_OUTPUT" | grep -q "file-aio" && echo "‚úÖ File AIO support" || echo "‚ÑπÔ∏è No File AIO"
          echo "$NGINX_V_OUTPUT" | grep -q "threads" && echo "‚úÖ Thread pool support" || echo "‚ÑπÔ∏è No thread pool"

      - name: Check Build Size and Performance
        run: |
          echo "üìä Nginx binary analysis..."
          
          # Check binary size
          ls -lh /usr/sbin/nginx
          
          # Check linked libraries
          echo -e "\n=== Linked Libraries ==="
          ldd /usr/sbin/nginx | head -20
          
          # Check for debugging symbols (should be stripped for production)
          if file /usr/sbin/nginx | grep -q "not stripped"; then
            echo "‚ö†Ô∏è Binary contains debugging symbols (larger size)"
          else
            echo "‚úÖ Binary is stripped (optimized size)"
          fi

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nginx-build-logs-ubuntu-24.04-${{ matrix.config }}
          path: |
            /tmp/*-build.log
            /var/log/EngineScript/
          retention-days: 5

      - name: Monitor Resource Usage
        if: always()
        run: |
          echo "üíæ Final disk usage:"
          df -h
          echo -e "\nüß† Memory usage:"
          free -h
          echo -e "\nüìÅ Large build directories:"
          sudo du -sh /tmp/* 2>/dev/null | sort -hr | head -10 || true

  http3-test:
    name: HTTP/3 Compilation Test
    runs-on: ubuntu-24.04
    if: github.event.inputs.test_http3 == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup HTTP/3 Build Environment
        run: |
          # Free space and install dependencies
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git wget curl autoconf automake libtool pkg-config
          
          # Setup EngineScript
          sudo mkdir -p /usr/local/bin/enginescript /home/EngineScript /var/log/EngineScript
          sudo cp -r scripts/ /usr/local/bin/enginescript/
          sudo cp enginescript-variables.txt /usr/local/bin/enginescript/
          sudo cp .github/ci-config/enginescript-install-options-ci.txt /home/EngineScript/enginescript-install-options.txt
          
          # Enable HTTP/3 in configuration
          echo "INSTALL_HTTP3=1" | sudo tee -a /home/EngineScript/enginescript-install-options.txt
          
          sudo find /usr/local/bin/enginescript -type f -name "*.sh" -exec chmod +x {} \;

      - name: Compile Nginx with HTTP/3
        run: |
          echo "üöÄ Testing Nginx compilation with HTTP/3 support..."
          
          # Install dependencies first
          cd /usr/local/bin/enginescript/scripts/install/depends
          sudo ./depends-install.sh
          
          # Compile dependencies
          cd /usr/local/bin/enginescript/scripts/install/openssl
          sudo timeout 600 ./openssl-install.sh
          
          # Compile Nginx with HTTP/3
          cd /usr/local/bin/enginescript/scripts/install/nginx
          sudo timeout 1800 ./nginx-install.sh 2>&1 | tee /tmp/nginx-http3.log
          
          # Verify HTTP/3 support
          if [ -f /usr/sbin/nginx ]; then
            echo "‚úÖ Nginx with HTTP/3 compiled successfully"
            sudo /usr/sbin/nginx -V 2>&1 | grep -q "http_v3" && echo "‚úÖ HTTP/3 module found" || echo "‚ùå HTTP/3 module missing"
          else
            echo "‚ùå Nginx HTTP/3 compilation failed"
            tail -100 /tmp/nginx-http3.log
            exit 1
          fi

  summary:
    name: Test Summary
    runs-on: ubuntu-24.04
    needs: [nginx-compile-matrix, http3-test]
    if: always()
    
    steps:
      - name: Generate Summary Report
        run: |
          echo "# Nginx Compilation Test Summary" > summary.md
          echo "" >> summary.md
          echo "## Matrix Test Results" >> summary.md
          echo "- **Nginx Compilation Matrix**: ${{ needs.nginx-compile-matrix.result }}" >> summary.md
          echo "- **HTTP/3 Test**: ${{ needs.http3-test.result }}" >> summary.md
          echo "" >> summary.md
          
          if [ "${{ needs.nginx-compile-matrix.result }}" = "success" ]; then
            echo "‚úÖ All Nginx compilation configurations passed" >> summary.md
          else
            echo "‚ùå Some Nginx compilation configurations failed" >> summary.md
          fi
          
          if [ "${{ needs.http3-test.result }}" = "success" ]; then
            echo "‚úÖ HTTP/3 compilation test passed" >> summary.md
          elif [ "${{ needs.http3-test.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è HTTP/3 compilation test was skipped" >> summary.md
          else
            echo "‚ùå HTTP/3 compilation test failed" >> summary.md
          fi
          
          echo "" >> summary.md
          echo "## Configuration Tested" >> summary.md
          echo "- Standard Nginx compilation" >> summary.md
          echo "- Optimized Nginx compilation with CPU detection" >> summary.md
          echo "- Ubuntu 24.04 LTS" >> summary.md
          echo "- OpenSSL, PCRE2, and Zlib dependency compilation" >> summary.md
          echo "- Module verification and configuration testing" >> summary.md
          
          cat summary.md

      - name: Comment Summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
