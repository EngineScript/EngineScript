# This workflow checks for new versions of key software dependencies (MariaDB, NGINX, OpenSSL, PCRE2, Zlib, etc.)
# and updates the enginescript-variables.txt file if newer versions are found. It creates a pull request with the
# changes and updates the version table in the README. This ensures EngineScript always tracks the latest stable
# releases of its core dependencies.

name: Software Version Check

on:
  schedule:
    - cron: '0 6 * * *'  # Runs daily at 6:00 AM UTC
  workflow_dispatch:      # Allows manual triggering
  push:
    paths:
      - 'enginescript-variables.txt'
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  check-versions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Software Versions
        id: version-check
        run: |
          # Initialize changes flag
          CHANGES_DETECTED=false
          
          # Create temporary file
          touch .github/temp_versions.txt
          
          # Function to compare version numbers
          version_gt() {
            test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"
          }
          
          # Function to extract current version
          get_current_version() {
            local var_name=$1
            grep "^${var_name}=" enginescript-variables.txt | cut -d'"' -f2
          }
          
          # Function to check and update version
          check_version() {
            local var_name=$1
            local new_ver=$2
            local current_ver=$(get_current_version "$var_name")
            
            if [ -n "$new_ver" ] && version_gt "$new_ver" "$current_ver"; then
              echo "${var_name}=\"${new_ver}\"" >> .github/temp_versions.txt
              CHANGES_DETECTED=true
              echo "::notice::${var_name} update available: ${current_ver} -> ${new_ver}"
            else
              grep "^${var_name}=" enginescript-variables.txt >> .github/temp_versions.txt
            fi
          }
          
          # MariaDB (11.4.x series)
          LATEST_MARIADB=$(curl -sL https://downloads.mariadb.org/mariadb/+releases/ | 
            grep -oP '11\.4\.[0-9]+(?=/)' | 
            sort -V | 
            tail -n1)
          check_version "MARIADB_VER" "$LATEST_MARIADB"
          
          # Simple Site Exporter Plugin
          LATEST_SSE=$(curl -s https://api.github.com/repos/EngineScript/Simple-Site-Exporter/releases/latest | 
            jq -r '.tag_name' | 
            sed 's/v//')
          
          # Check if SSE_PLUGIN_VER exists, if not add it
          if ! grep -q "^SSE_PLUGIN_VER=" enginescript-variables.txt; then
            echo "SSE_PLUGIN_VER=\"$LATEST_SSE\"" >> enginescript-variables.txt
            echo "::notice::Added SSE_PLUGIN_VER=$LATEST_SSE to enginescript-variables.txt"
            CHANGES_DETECTED=true
          else
            check_version "SSE_PLUGIN_VER" "$LATEST_SSE"
          fi
          
          # PCRE2
          LATEST_PCRE2=$(curl -s https://api.github.com/repos/PCRE2Project/pcre2/releases/latest | 
            jq -r '.tag_name' | 
            sed 's/pcre2-//')
          check_version "PCRE2_VER" "$LATEST_PCRE2"
          
          # OpenSSL (3.4.x series)
          LATEST_OPENSSL=$(curl -s https://api.github.com/repos/openssl/openssl/releases | 
            jq -r '.[].tag_name' | 
            grep '^openssl-3\.4\.[0-9]*$' | 
            sort -V | 
            tail -n 1 | 
            sed 's/openssl-//')
          check_version "OPENSSL_VER" "$LATEST_OPENSSL"
          
          # NGINX
          LATEST_NGINX=$(curl -s https://nginx.org/en/download.html | 
            grep -o 'nginx-[0-9]\.[0-9]*\.[0-9]*\.tar\.gz' | 
            head -n 1 | 
            sed 's/nginx-\(.*\)\.tar\.gz/\1/')
          check_version "NGINX_VER" "$LATEST_NGINX"
          
          # phpMyAdmin
          LATEST_PMA=$(curl -s https://www.phpmyadmin.net/downloads/ | 
            grep -oP 'phpMyAdmin-\K[0-9]+\.[0-9]+\.[0-9]+(?=-all-languages\.zip)' | 
            head -n1)
          check_version "PHPMYADMIN_VER" "$LATEST_PMA"
          
          # Zlib
          LATEST_ZLIB=$(curl -s https://api.github.com/repos/madler/zlib/tags | 
            jq -r '.[0].name' | 
            sed 's/v//')
          check_version "ZLIB_VER" "$LATEST_ZLIB"
          
          # liburing
          LATEST_LIBURING=$(curl -s https://api.github.com/repos/axboe/liburing/tags | 
            jq -r '.[0].name' | 
            sed 's/liburing-//')
          check_version "LIBURING_VER" "$LATEST_LIBURING"
          
          # NGINX Headers More Module
          LATEST_NGINX_HEADER=$(curl -s https://api.github.com/repos/openresty/headers-more-nginx-module/tags | 
            jq -r '.[0].name' | 
            sed 's/v//')
          check_version "NGINX_HEADER_VER" "$LATEST_NGINX_HEADER"
          
          # NGINX Cache Purge Module
          LATEST_NGINX_PURGE=$(curl -s https://api.github.com/repos/nginx-modules/ngx_cache_purge/tags | 
            jq -r '.[0].name' | 
            sed 's/[^0-9\.]//g')
          check_version "NGINX_PURGE_VER" "$LATEST_NGINX_PURGE"
          
          # NGINX Dynamic TLS Records Patch
          LATEST_NGINX_DYN_TLS_PATCH_SHA=$(curl -sL https://github.com/kn007/patch/raw/master/nginx_dynamic_tls_records.patch | sha256sum | awk '{print $1}')
          CURRENT_NGINX_DYN_TLS_PATCH_SHA=$(grep '^NGINX_DYN_TLS_PATCH_SHA=' enginescript-variables.txt | cut -d'"' -f2)
          if [ -n "$LATEST_NGINX_DYN_TLS_PATCH_SHA" ] && [ "$LATEST_NGINX_DYN_TLS_PATCH_SHA" != "$CURRENT_NGINX_DYN_TLS_PATCH_SHA" ]; then
            echo "NGINX_DYN_TLS_PATCH_SHA=\"$LATEST_NGINX_DYN_TLS_PATCH_SHA\"" >> .github/temp_versions.txt
            CHANGES_DETECTED=true
            echo "::notice::NGINX_DYN_TLS_PATCH_SHA update detected: $CURRENT_NGINX_DYN_TLS_PATCH_SHA -> $LATEST_NGINX_DYN_TLS_PATCH_SHA"
          else
            grep '^NGINX_DYN_TLS_PATCH_SHA=' enginescript-variables.txt >> .github/temp_versions.txt
          fi
          
          # Update date only if versions changed
          if [ "$CHANGES_DETECTED" = true ]; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            NEW_DATE=$(date +'%b%d%y' | tr '[:lower:]' '[:upper:]')
            echo "VARIABLES_DATE=\"$NEW_DATE\"" >> .github/temp_versions.txt
            
            # Generate changelog
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "The following software versions have been updated:" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "| Software | Current | New |" >> $GITHUB_OUTPUT
            echo "|----------|---------|-----|" >> $GITHUB_OUTPUT
            while IFS= read -r line; do
              if [[ $line =~ ^([A-Z_]+)_VER=\"(.*)\" ]]; then
                var_name="${BASH_REMATCH[1]}"
                new_ver="${BASH_REMATCH[2]}"
                current_ver=$(get_current_version "${var_name}_VER")
                if [ "$new_ver" != "$current_ver" ]; then
                  echo "| $var_name | $current_ver | $new_ver |" >> $GITHUB_OUTPUT
                fi
              fi
            done < .github/temp_versions.txt
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            # No changes, copy existing date
            grep "VARIABLES_DATE=" enginescript-variables.txt >> .github/temp_versions.txt
          fi

      - name: Update Variables File
        if: steps.version-check.outputs.changes_detected == 'true'
        run: |
          # Update version numbers from temp file
          while IFS= read -r line; do
            if [[ $line =~ ^[A-Z_]+_VER= ]]; then
              var_name=$(echo "$line" | cut -d= -f1)
              sed -i "s/$var_name=\".*\"/$line/" enginescript-variables.txt
            elif [[ $line =~ ^VARIABLES_DATE= ]]; then
              sed -i "s/VARIABLES_DATE=\".*\"/$line/" enginescript-variables.txt
            fi
          done < .github/temp_versions.txt

      - name: Create Pull Request
        if: steps.version-check.outputs.changes_detected == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update software versions"
          title: "chore: update software versions"
          body: |
            Automated software version updates
            
            ${{ steps.version-check.outputs.changelog }}
            
            These updates ensure EngineScript uses the latest stable versions of its dependencies.
          branch: update-software-versions
          delete-branch: true
          labels: |
            automated
            dependencies

      - name: Update Software Version Table in README
        if: steps.version-check.outputs.changes_detected == 'true'
        run: |
          #!/usr/bin/env bash
          set -e
          
          # Helper: get value from enginescript-variables.txt
          get_var() {
            grep "^$1=" enginescript-variables.txt | cut -d'"' -f2
          }
          
          # Get all versions
          NGINX_VER=$(get_var NGINX_VER)
          NGINX_PURGE_VER=$(get_var NGINX_PURGE_VER)
          NGINX_HEADER_VER=$(get_var NGINX_HEADER_VER)
          OPENSSL_VER=$(get_var OPENSSL_VER)
          PCRE2_VER=$(get_var PCRE2_VER)
          ZLIB_VER=$(get_var ZLIB_VER)
          LIBURING_VER=$(get_var LIBURING_VER)
          PHPMYADMIN_VER=$(get_var PHPMYADMIN_VER)
          MARIADB_VER=$(get_var MARIADB_VER)
          NGINX_DYN_TLS_PATCH_SHA=$(get_var NGINX_DYN_TLS_PATCH_SHA)
          SSE_PLUGIN_VER=$(get_var SSE_PLUGIN_VER)

          # Get patch date (Last-Modified header or today)
          PATCH_URL="https://github.com/kn007/patch/raw/master/nginx_dynamic_tls_records.patch"
          PATCH_DATE=$(curl -sI "$PATCH_URL" | grep -i '^last-modified:' | cut -d' ' -f2- | tr -d '\r')
          if [ -z "$PATCH_DATE" ]; then
            PATCH_DATE=$(date +'%b %d %Y')
          fi

          # Format patch date for table (e.g. Apr 17 2025)
          PATCH_DATE_FMT=$(date -d "$PATCH_DATE" +'%b %d %Y' 2>/dev/null || echo "$PATCH_DATE")

          # Update README.md table
          sed -i \
            -e "/|NGINX MAINLINE|/s/|[^|]*|/|$NGINX_VER|/2" \
            -e "/|NGINX CACHE PURGE|/s/|[^|]*|/|$NGINX_PURGE_VER|/2" \
            -e "/|NGINX HEADERS MORE|/s/|[^|]*|/|$NGINX_HEADER_VER|/2" \
            -e "/|NGINX PATCH: Dynamic TLS Records|/s/|[^|]*|/|$PATCH_DATE_FMT|/2" \
            -e "/|OPENSSL|/s/|[^|]*|/|$OPENSSL_VER|/2" \
            -e "/|PCRE2|/s/|[^|]*|/|$PCRE2_VER|/2" \
            -e "/|ZLIB-Cloudflare|/s/|[^|]*|/|$ZLIB_VER|/2" \
            -e "/|LIBURING|/s/|[^|]*|/|$LIBURING_VER|/2" \
            -e "/|PHPMYADMIN|/s/|[^|]*|/|$PHPMYADMIN_VER|/2" \
            -e "/|MARIADB|/s/|[^|]*|/|$MARIADB_VER|/2" \
            README.md
            
          # Update Simple Site Exporter Plugin version in README
          # This uses a different pattern because we need to also update the URL to point to the new repository
          if [ -n "$SSE_PLUGIN_VER" ]; then
            sed -i \
              -e "/|PLUGIN: EngineScript: Simple Site Exporter|/s/|[^|]*|/|$SSE_PLUGIN_VER|/2" \
              -e "/|PLUGIN: EngineScript: Simple Site Exporter|/s#\[https://github.com/EngineScript/EngineScript\](https://github.com/EngineScript/EngineScript/blob/master/config/var/www/wordpress/plugins/simple-site-exporter-enginescript/simple-site-exporter.php)#\[https://github.com/EngineScript/Simple-Site-Exporter\](https://github.com/EngineScript/Simple-Site-Exporter)#" \
              README.md
          fi
          
      - name: Cleanup temp_versions.txt
        if: always()
        run: rm -f .github/temp_versions.txt
