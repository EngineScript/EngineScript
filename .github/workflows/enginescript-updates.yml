# This workflow automatically comments out any uncommented commands under the
# '# Start Normal Automatic Upgrade' and '# Start Emergency Automatic Upgrade'
# sections in the auto-upgrade scripts if they are older than 7 days. It adds a
# date comment above commented lines and labels the commit as 'automated'.
#
# Runs daily and on manual dispatch.

name: Comment Old Auto Upgrade

on:
  schedule:
    - cron: '0 3 * * *' # Runs daily at 3am UTC
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  comment-old-auto-upgrade:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Comment old auto-upgrade commands
        id: comment_auto_upgrade
        run: |
          import os
          import re
          from datetime import datetime, timedelta

          FILES = [
              'scripts/functions/auto-upgrade/normal-auto-upgrade.sh',
              'scripts/functions/auto-upgrade/emergency-auto-upgrade.sh',
          ]
          THRESHOLD_DAYS = 7
          TODAY = datetime.utcnow().date()

          changes_made = False

          for file in FILES:
              if not os.path.exists(file):
                  continue
              with open(file, 'r', encoding='utf-8') as f:
                  lines = f.readlines()
              out_lines = []
              in_section = False
              last_update_date = None
              for i, line in enumerate(lines):
                  # Detect section start
                  if re.match(r'^# Start (Normal|Emergency) Automatic Upgrade', line):
                      in_section = True
                      out_lines.append(line)
                      continue
                  # Detect last updated date comment
                  m = re.match(r'^# Last updated: (\d{4}-\d{2}-\d{2})', line)
                  if in_section and m:
                      last_update_date = datetime.strptime(m.group(1), '%Y-%m-%d').date()
                      out_lines.append(line)
                      continue
                  # If in section, process uncommented commands
                  if in_section and not line.lstrip().startswith('#') and line.strip() != '':
                      # If no last update date, add one for today
                      if not last_update_date:
                          last_update_date = TODAY
                          out_lines.append(f'# Last updated: {TODAY.isoformat()}\n')
                      days_old = (TODAY - last_update_date).days
                      if days_old >= THRESHOLD_DAYS:
                          out_lines.append(f'# Commented out on {TODAY.isoformat()}\n')
                          out_lines.append(f'# {line.lstrip()}')
                          changes_made = True
                      else:
                          out_lines.append(line)
                  else:
                      out_lines.append(line)
                  # End section if we hit a blank line or another section
                  if in_section and (line.strip() == '' or (line.startswith('#') and not line.startswith('# Last updated:'))):
                      in_section = False
                      last_update_date = None
              with open(file, 'w', encoding='utf-8') as f:
                  f.writelines(out_lines)
          # Set output for labeling
          if changes_made:
              print('::set-output name=auto_upgrade_changed::true')
          else:
              print('::set-output name=auto_upgrade_changed::false')

      - name: Commit and push changes
        if: steps.comment_auto_upgrade.outputs.auto_upgrade_changed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add scripts/functions/auto-upgrade/normal-auto-upgrade.sh scripts/functions/auto-upgrade/emergency-auto-upgrade.sh
          git diff --cached --quiet || git commit -m "chore: comment out old auto-upgrade commands after 7 days [automated]"
          git push

      - name: Add label to commit (if changes made)
        if: steps.comment_auto_upgrade.outputs.auto_upgrade_changed == 'true'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: automated
