name: EngineScript Build Test

on:
  pull_request:
    # Run on all pull requests for comprehensive testing
  push:
    # Run on all pushes to any branch for comprehensive testing
    paths:
      - 'scripts/**'
      - 'enginescript-variables.txt'
      - 'config/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  full-build-test:
    name: Full EngineScript Build Test
    runs-on: ubuntu-24.04
    timeout-minutes: 180
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Maximize Disk Space
        run: |
          echo "🧹 Freeing up disk space for full build..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/graalvm
          sudo rm -rf /usr/local/.ghcup
          sudo docker system prune -af
          sudo apt-get autoremove -y
          sudo apt-get autoclean
          echo "💾 Available disk space:"
          df -h

      - name: Setup Full Build Environment
        run: |
          echo "🏗️ Setting up full build environment..."
          sudo apt-get update -qq
          
          # Create required directories including log directories
          sudo mkdir -p /usr/local/bin/enginescript /home/EngineScript /var/log/EngineScript /tmp/ci-logs
          
          # Set proper permissions on log directory for file operations
          sudo chmod 755 /tmp/ci-logs
          sudo chown runner:runner /tmp/ci-logs
          
          # Copy entire project to build location
          sudo cp -r . /usr/local/bin/enginescript/
          
          # Copy CI configuration
          if [ -f .github/ci-config/enginescript-install-options-ci.txt ]; then
            sudo cp .github/ci-config/enginescript-install-options-ci.txt /home/EngineScript/enginescript-install-options.txt
            echo "✅ CI configuration copied successfully"
          else
            echo "⚠️ CI configuration file not found, creating default"
            sudo touch /home/EngineScript/enginescript-install-options.txt
          fi
          
          # CRITICAL: Set executable permissions immediately after copying
          echo "🔧 Setting executable permissions on all scripts..."
          sudo find /usr/local/bin/enginescript -type f -name "*.sh" -exec chmod +x {} \;
          
          # Initialize main CI log with timestamp
          echo "EngineScript CI Build Started: $(date)" | sudo tee /tmp/ci-logs/ci-main.log
          echo "Build environment: Ubuntu $(lsb_release -rs)" | sudo tee -a /tmp/ci-logs/ci-main.log
          
          echo "✅ Full build environment setup completed with proper permissions"

      - name: Run Base System Setup
        run: |
          echo "🔧 Running base system setup..."
          cd /usr/local/bin/enginescript
          
          # Set CI environment variable to bypass root checks in scripts
          export CI_ENVIRONMENT=true
          export DEBIAN_FRONTEND=noninteractive
          
          # Initialize setup log
          echo "EngineScript Base System Setup Started: $(date)" | sudo tee /tmp/ci-logs/setup.log
          
          # Check user privileges (CI runs as root via sudo)
          # In CI environment, force root context for script compatibility
          if ! sudo bash -c 'test "${EUID}" -eq 0'; then
            echo "ALERT: Unable to establish root context for EngineScript installation." | sudo tee -a /tmp/ci-logs/setup.log
            exit 1
          fi
          echo "✅ Running with root privileges (CI environment)" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Check architecture
          BIT_TYPE=$(uname -m)
          if [ "${BIT_TYPE}" != 'x86_64' ]; then
            echo "EngineScript requires a 64-bit environment to run optimally." | sudo tee -a /tmp/ci-logs/setup.log
            exit 1
          fi
          echo "✅ Detected 64-bit architecture: $BIT_TYPE" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Check Ubuntu version
          LINUX_TYPE=$(lsb_release -i | cut -d':' -f 2 | tr -d '[:space:]')
          UBUNTU_VERSION="$(lsb_release -sr)"
          
          if [ "$LINUX_TYPE" != "Ubuntu" ]; then
            echo "EngineScript does not support $LINUX_TYPE. Please use Ubuntu 22.04 or 24.04" | sudo tee -a /tmp/ci-logs/setup.log
            exit 1
          fi
          echo "✅ Detected Linux Type: $LINUX_TYPE" | sudo tee -a /tmp/ci-logs/setup.log
          echo "✅ Current Ubuntu Version: $UBUNTU_VERSION" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Install required packages for script (excluding problematic packages)
          echo "📦 Installing core packages..." | sudo tee -a /tmp/ci-logs/setup.log
          sudo apt update --allow-releaseinfo-change -y 2>&1 | sudo tee -a /tmp/ci-logs/setup.log
          
          # Core packages without dos2unix and tzdata (problematic in CI)
          core_packages="apt bash boxes cron coreutils curl git gzip nano openssl pwgen sed software-properties-common tar unattended-upgrades unzip zip"
          
          sudo apt install -qy $core_packages 2>&1 | sudo tee -a /tmp/ci-logs/setup.log || {
            echo "Error: Unable to install one or more packages. Exiting..." | sudo tee -a /tmp/ci-logs/setup.log
            exit 1
          }
          echo "✅ Core packages installed successfully" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Check for required commands (excluding dos2unix)
          required_commands=("apt" "boxes" "git" "nano" "wget")
          for cmd in "${required_commands[@]}"; do
            if ! command -v $cmd &> /dev/null; then
              echo "Error: $cmd is not installed. Please install it and try again." | sudo tee -a /tmp/ci-logs/setup.log
              exit 1
            fi
          done
          echo "✅ All required commands available" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Configure needrestart for automated restarts
          sudo sed -i "s/#\$nrconf{restart} = 'i';/\$nrconf{restart} = 'a';/" /etc/needrestart/needrestart.conf 2>&1 | sudo tee -a /tmp/ci-logs/setup.log
          echo "✅ Configured needrestart for automated mode" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Upgrade software
          echo "📈 Upgrading system packages..." | sudo tee -a /tmp/ci-logs/setup.log
          sudo apt upgrade -y 2>&1 | sudo tee -a /tmp/ci-logs/setup.log
          echo "✅ System packages upgraded" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Create EngineScript directories (already done in earlier step, but ensure completeness)
          echo "📁 Creating EngineScript directories..." | sudo tee -a /tmp/ci-logs/setup.log
          sudo mkdir -p "/home/EngineScript/config-backups/nginx"
          sudo mkdir -p "/home/EngineScript/config-backups/php"
          sudo mkdir -p "/home/EngineScript/mysql-credentials"
          sudo mkdir -p "/home/EngineScript/site-backups"
          sudo mkdir -p "/home/EngineScript/sites-list"
          sudo mkdir -p "/home/EngineScript/temp/site-export"
          sudo mkdir -p "/home/EngineScript/temp/site-import-completed-backups"
          sudo mkdir -p "/home/EngineScript/temp/site-import/database-file"
          sudo mkdir -p "/home/EngineScript/temp/site-import/root-directory"
          echo "✅ EngineScript directories created" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Set directory and file permissions
          echo "🔧 Setting permissions..." | sudo tee -a /tmp/ci-logs/setup.log
          sudo find /usr/local/bin/enginescript -type d,f -exec chmod 755 {} \; 2>&1 | sudo tee -a /tmp/ci-logs/setup.log
          sudo chown -R root:root /usr/local/bin/enginescript 2>&1 | sudo tee -a /tmp/ci-logs/setup.log
          sudo find /usr/local/bin/enginescript -type f -iname "*.sh" -exec chmod +x {} \; 2>&1 | sudo tee -a /tmp/ci-logs/setup.log
          echo "✅ Permissions set correctly" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Create EngineScript log files (already done in earlier step, but ensure completeness)
          echo "📊 Creating log files..." | sudo tee -a /tmp/ci-logs/setup.log
          sudo touch "/var/log/EngineScript/install-error-log.txt"
          sudo touch "/var/log/EngineScript/install-log.txt"
          sudo touch "/var/log/EngineScript/vhost-export.log"
          sudo touch "/var/log/EngineScript/vhost-import.log"
          sudo touch "/var/log/EngineScript/vhost-install.log"
          sudo touch "/var/log/EngineScript/vhost-remove.log"
          echo "✅ Log files created" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Skip logrotate setup (not needed for CI)
          echo "⏭️ Skipping logrotate setup (not needed for CI environment)" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Skip alias setup (not needed for CI) 
          echo "⏭️ Skipping alias setup (not needed for CI environment)" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Cleanup old packages
          echo "🧹 Cleaning up old packages..." | sudo tee -a /tmp/ci-logs/setup.log
          sudo apt-get remove 'apache2.*' 'php7\.0.*' 'php7\.1.*' 'php7\.2.*' 'php7\.3.*' 'php7\.4.*' 'php8\.0.*' 'php8\.1.*' 'php8\.2.*' 'php8\.3.*' -y 2>&1 | sudo tee -a /tmp/ci-logs/setup.log
          echo "✅ Old packages cleaned up" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Final update
          echo "� Final system update..." | sudo tee -a /tmp/ci-logs/setup.log
          sudo apt update --allow-releaseinfo-change -y 2>&1 | sudo tee -a /tmp/ci-logs/setup.log
          sudo apt upgrade -y 2>&1 | sudo tee -a /tmp/ci-logs/setup.log
          
          # Skip timezone configuration (problematic in CI)
          echo "⏭️ Skipping timezone configuration (not suitable for CI environment)" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Skip unattended upgrades configuration (not needed for CI)
          echo "⏭️ Skipping unattended upgrades configuration (not needed for CI environment)" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Skip MOTD setup (not needed for CI)
          echo "⏭️ Skipping MOTD setup (not needed for CI environment)" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Skip HWE kernel installation (not suitable for CI)
          echo "⏭️ Skipping HWE kernel installation (not suitable for CI environment)" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Remove old downloads and clean up
          echo "🗑️ Final cleanup..." | sudo tee -a /tmp/ci-logs/setup.log
          sudo rm -rf /usr/src/*.tar.gz* 2>&1 | sudo tee -a /tmp/ci-logs/setup.log
          sudo apt clean -y 2>&1 | sudo tee -a /tmp/ci-logs/setup.log
          sudo apt autoremove --purge -y 2>&1 | sudo tee -a /tmp/ci-logs/setup.log
          sudo apt autoclean -y 2>&1 | sudo tee -a /tmp/ci-logs/setup.log
          echo "✅ Final cleanup completed" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Ensure options file exists (create if missing)
          if [ ! -f "/home/EngineScript/enginescript-install-options.txt" ]; then
            echo "📝 Creating default install options file..." | sudo tee -a /tmp/ci-logs/setup.log
            sudo cp -rf /usr/local/bin/enginescript/config/home/enginescript-install-options.txt /home/EngineScript/enginescript-install-options.txt 2>&1 | sudo tee -a /tmp/ci-logs/setup.log
            echo "✅ Install options file created" | sudo tee -a /tmp/ci-logs/setup.log
          else
            echo "✅ Install options file already exists" | sudo tee -a /tmp/ci-logs/setup.log
          fi
          
          echo "✅ Base system setup completed successfully at $(date)" | sudo tee -a /tmp/ci-logs/setup.log
          
          # Ensure log is flushed and has content
          sudo sync
          if [ -s /tmp/ci-logs/setup.log ]; then
            echo "✅ Setup log created successfully ($(wc -l < /tmp/ci-logs/setup.log) lines)"
          else
            echo "⚠️ Setup log is empty, creating summary"
            echo "Setup completed at $(date)" | sudo tee /tmp/ci-logs/setup.log
          fi

      - name: Install Base EngineScript Components
        run: |
          echo "🔧 Installing base EngineScript components in proper sequence..."
          cd /usr/local/bin/enginescript/scripts/install
          
          # Set CI environment variables to bypass root checks and interactive prompts
          export CI_ENVIRONMENT=true
          export DEBIAN_FRONTEND=noninteractive
          
          # Source variables and set CI mode
          source /usr/local/bin/enginescript/enginescript-variables.txt
          source /home/EngineScript/enginescript-install-options.txt
          export DEBUG_INSTALL=0  # Disable debug prompts for CI
          
          # Step 1: Install repositories
          echo "📦 Installing repositories..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 600 ./repositories/repositories-install.sh" 2>&1 | sudo tee /tmp/ci-logs/repos.log || {
            echo "⚠️ Repositories installation had issues, continuing..."
            tail -30 /tmp/ci-logs/repos.log
          }
          sudo sync
          
          # Step 2: Remove preinstalled software
          echo "🗑️ Removing preinstalled software..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 300 ./removes/remove-preinstalled.sh" 2>&1 | sudo tee /tmp/ci-logs/removes.log || {
            echo "⚠️ Remove preinstalled software had issues, continuing..."
            tail -30 /tmp/ci-logs/removes.log
          }
          sudo sync
          
          # Step 3: Block unwanted packages
          echo "🚫 Blocking unwanted packages..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 300 ./block/package-block.sh" 2>&1 | sudo tee /tmp/ci-logs/block.log || {
            echo "⚠️ Package blocking had issues, continuing..."
            tail -30 /tmp/ci-logs/block.log
          }
          sudo sync
          
          # Step 4: Install dependencies
          echo "📚 Installing dependencies..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 900 ./depends/depends-install.sh" 2>&1 | sudo tee /tmp/ci-logs/depends.log || {
            echo "⚠️ Dependencies installation had issues, continuing..."
            tail -50 /tmp/ci-logs/depends.log
          }
          sudo sync
          
          # Step 5: Install cron
          echo "⏰ Installing cron..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 300 ./cron/cron-install.sh" 2>&1 | sudo tee /tmp/ci-logs/cron.log || {
            echo "⚠️ Cron installation had issues, continuing..."
            tail -30 /tmp/ci-logs/cron.log
          }
          sudo sync
          
          # Step 6: Install ACME.sh
          echo "🔐 Installing ACME.sh..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 300 ./acme/acme-install.sh" 2>&1 | sudo tee /tmp/ci-logs/acme.log || {
            echo "⚠️ ACME.sh installation had issues, continuing..."
            tail -30 /tmp/ci-logs/acme.log
          }
          sudo sync
          
          # Step 7: Install GCC
          echo "🔨 Installing GCC..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 600 ./gcc/gcc-install.sh" 2>&1 | sudo tee /tmp/ci-logs/gcc.log || {
            echo "⚠️ GCC installation had issues, continuing..."
            tail -30 /tmp/ci-logs/gcc.log
          }
          sudo sync
          
          # Step 8: Install OpenSSL
          echo "🔒 Installing OpenSSL..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 900 ./openssl/openssl-install.sh" 2>&1 | sudo tee /tmp/ci-logs/openssl.log || {
            echo "⚠️ OpenSSL installation had issues, continuing..."
            tail -50 /tmp/ci-logs/openssl.log
          }
          sudo sync
          
          # Step 9: Install Swap
          echo "💾 Installing Swap..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 300 ./swap/swap-install.sh" 2>&1 | sudo tee /tmp/ci-logs/swap.log || {
            echo "⚠️ Swap installation had issues, continuing..."
            tail -30 /tmp/ci-logs/swap.log
          }
          sudo sync
          
          # Skip kernel tweaks (not suitable for CI)
          echo "⏭️ Skipping kernel tweaks (not suitable for CI environment)"
          
          # Step 10: Install PCRE
          echo "📝 Installing PCRE..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 600 ./pcre/pcre-install.sh" 2>&1 | sudo tee /tmp/ci-logs/pcre.log || {
            echo "⚠️ PCRE installation had issues, continuing..."
            tail -30 /tmp/ci-logs/pcre.log
          }
          sudo sync
          
          # Step 11: Install Zlib
          echo "📦 Installing Zlib..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 600 ./zlib/zlib-install.sh" 2>&1 | sudo tee /tmp/ci-logs/zlib.log || {
            echo "⚠️ Zlib installation had issues, continuing..."
            tail -30 /tmp/ci-logs/zlib.log
          }
          sudo sync
          
          # Step 12: Install liburing
          echo "⚡ Installing liburing..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 600 ./liburing/liburing-install.sh" 2>&1 | sudo tee /tmp/ci-logs/liburing.log || {
            echo "⚠️ liburing installation had issues, continuing..."
            tail -30 /tmp/ci-logs/liburing.log
          }
          sudo sync
          
          # Skip UFW (firewall not needed for CI)
          echo "⏭️ Skipping UFW (firewall not needed for CI environment)"
          
          echo "✅ Base EngineScript installation completed"

      - name: Build Core Components
        run: |
          echo "🔨 Building core components..."
          cd /usr/local/bin/enginescript/scripts/install
          
          # Set CI environment variables to bypass root checks
          export CI_ENVIRONMENT=true
          export DEBIAN_FRONTEND=noninteractive
          
          # Build Nginx with custom optimizations
          echo "🌐 Building Nginx..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 1200 ./nginx/nginx-install.sh" 2>&1 | sudo tee /tmp/ci-logs/nginx.log || {
            echo "❌ Nginx build failed"
            tail -50 /tmp/ci-logs/nginx.log
            exit 1
          }
          
          # Ensure log is flushed and has content
          sudo sync
          if [ -s /tmp/ci-logs/nginx.log ]; then
            echo "✅ Nginx build log created successfully ($(wc -l < /tmp/ci-logs/nginx.log) lines)"
          else
            echo "⚠️ Nginx build log is empty, creating summary"
            echo "Nginx build completed at $(date)" | sudo tee /tmp/ci-logs/nginx.log
          fi
          
          # Build PHP
          echo "🐘 Building PHP..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 1800 ./php/php-install.sh" 2>&1 | sudo tee /tmp/ci-logs/php.log || {
            echo "❌ PHP build failed"
            tail -50 /tmp/ci-logs/php.log
            exit 1
          }
          
          # Ensure log is flushed and has content
          sudo sync
          if [ -s /tmp/ci-logs/php.log ]; then
            echo "✅ PHP build log created successfully ($(wc -l < /tmp/ci-logs/php.log) lines)"
          else
            echo "⚠️ PHP build log is empty, creating summary"
            echo "PHP build completed at $(date)" | sudo tee /tmp/ci-logs/php.log
          fi
          
          echo "✅ Core components build completed"

      - name: Install Database and Cache
        run: |
          echo "🗄️ Installing database and cache systems..."
          cd /usr/local/bin/enginescript/scripts/install
          
          # Set CI environment variables to bypass root checks
          export CI_ENVIRONMENT=true
          export DEBIAN_FRONTEND=noninteractive
          
          # Install MariaDB
          echo "🐬 Installing MariaDB..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 900 ./mariadb/mariadb-install.sh" 2>&1 | sudo tee /tmp/ci-logs/mariadb.log || {
            echo "❌ MariaDB installation failed"
            tail -50 /tmp/ci-logs/mariadb.log
            exit 1
          }
          
          # Ensure log is flushed and has content
          sudo sync
          if [ -s /tmp/ci-logs/mariadb.log ]; then
            echo "✅ MariaDB install log created successfully ($(wc -l < /tmp/ci-logs/mariadb.log) lines)"
          else
            echo "⚠️ MariaDB install log is empty, creating summary"
            echo "MariaDB installation completed at $(date)" | sudo tee /tmp/ci-logs/mariadb.log
          fi
          
          # Install Redis
          echo "🔴 Installing Redis..."
          sudo bash -c "cd /usr/local/bin/enginescript/scripts/install && timeout 600 ./redis/redis-install.sh" 2>&1 | sudo tee /tmp/ci-logs/redis.log || {
            echo "❌ Redis installation failed"
            tail -50 /tmp/ci-logs/redis.log
            exit 1
          }
          
          # Ensure log is flushed and has content
          sudo sync
          if [ -s /tmp/ci-logs/redis.log ]; then
            echo "✅ Redis install log created successfully ($(wc -l < /tmp/ci-logs/redis.log) lines)"
          else
            echo "⚠️ Redis install log is empty, creating summary"
            echo "Redis installation completed at $(date)" | sudo tee /tmp/ci-logs/redis.log
          fi

      - name: Verify Full Build Results
        if: always()
        run: |
          echo "🔍 Verifying full build results..."
          
          # Check if key binaries exist
          if [ -f /usr/sbin/nginx ]; then
            echo "✅ Nginx binary installed at /usr/sbin/nginx"
            /usr/sbin/nginx -v 2>&1 || echo "⚠️ Nginx version check failed"
          else
            echo "❌ Nginx binary missing"
          fi
          
          if [ -f /usr/local/bin/php ]; then
            echo "✅ PHP binary installed at /usr/local/bin/php"
            /usr/local/bin/php -v 2>&1 || echo "⚠️ PHP version check failed"
          else
            echo "❌ PHP binary missing"
          fi
          
          if [ -f /usr/local/mysql/bin/mysql ]; then
            echo "✅ MariaDB binary installed at /usr/local/mysql/bin/mysql"
            /usr/local/mysql/bin/mysql --version 2>&1 || echo "⚠️ MariaDB version check failed"
          else
            echo "❌ MariaDB binary missing"
          fi
          
          if command -v redis-server &> /dev/null; then
            echo "✅ Redis server installed and available"
            redis-server --version 2>&1 || echo "⚠️ Redis version check failed"
          else
            echo "❌ Redis server missing"
          fi
          
          # Check configuration files
          echo "📁 Configuration files:"
          [ -f /etc/nginx/nginx.conf ] && echo "✅ Nginx config exists" || echo "❌ Nginx config missing"
          [ -f /usr/local/etc/php.ini ] && echo "✅ PHP config exists" || echo "❌ PHP config missing"
          [ -f /etc/mysql/mariadb.cnf ] && echo "✅ MariaDB config exists" || echo "❌ MariaDB config missing"
          [ -f /etc/redis/redis.conf ] && echo "✅ Redis config exists" || echo "❌ Redis config missing"
          
          # Show disk usage
          echo "💾 Final disk usage:"
          df -h
          
          echo "📊 Build artifacts summary:"
          du -sh /usr/local/bin/enginescript/ 2>/dev/null || echo "Build directory size unknown"
          du -sh /var/log/EngineScript/ 2>/dev/null || echo "Log directory size unknown"

      - name: Report Test Results
        if: always()
        run: |
          echo "📋 Generating comprehensive test results..."
          
          # Initialize result variables
          NGINX_STATUS="❌ Failed"
          PHP_STATUS="❌ Failed"
          MARIADB_STATUS="❌ Failed"
          REDIS_STATUS="❌ Failed"
          OVERALL_STATUS="❌ FAILED"
          
          # Check component status based on binaries and logs
          if [ -f /usr/sbin/nginx ] && /usr/sbin/nginx -v >/dev/null 2>&1; then
            NGINX_STATUS="✅ Success"
          fi
          
          if [ -f /usr/local/bin/php ] && /usr/local/bin/php -v >/dev/null 2>&1; then
            PHP_STATUS="✅ Success"
          fi
          
          if [ -f /usr/local/mysql/bin/mysql ] && /usr/local/mysql/bin/mysql --version >/dev/null 2>&1; then
            MARIADB_STATUS="✅ Success"
          fi
          
          if command -v redis-server >/dev/null 2>&1 && redis-server --version >/dev/null 2>&1; then
            REDIS_STATUS="✅ Success"
          fi
          
          # Determine overall status
          if [[ "$NGINX_STATUS" == "✅ Success" && "$PHP_STATUS" == "✅ Success" && "$MARIADB_STATUS" == "✅ Success" && "$REDIS_STATUS" == "✅ Success" ]]; then
            OVERALL_STATUS="✅ SUCCESS"
          fi
          
          # Create comprehensive test summary
          cat > /tmp/ci-logs/test-summary.md << EOF
          # EngineScript Build Test Results
          
          ## 🎯 Overall Status
          **$OVERALL_STATUS**
          
          ## 📦 Component Results
          
          | Component | Status | Version | Config |
          |-----------|--------|---------|--------|
          | **Nginx** | $NGINX_STATUS | $([ -f /usr/sbin/nginx ] && /usr/sbin/nginx -v 2>&1 | head -1 | cut -d' ' -f3 | cut -d'/' -f2 || echo "Not installed") | $([ -f /etc/nginx/nginx.conf ] && echo "✅ Present" || echo "❌ Missing") |
          | **PHP** | $PHP_STATUS | $([ -f /usr/local/bin/php ] && /usr/local/bin/php -v 2>&1 | head -1 | cut -d' ' -f2 || echo "Not installed") | $([ -f /usr/local/etc/php.ini ] && echo "✅ Present" || echo "❌ Missing") |
          | **MariaDB** | $MARIADB_STATUS | $([ -f /usr/local/mysql/bin/mysql ] && /usr/local/mysql/bin/mysql --version 2>&1 | head -1 | cut -d' ' -f6 | cut -d',' -f1 || echo "Not installed") | $([ -f /etc/mysql/mariadb.cnf ] && echo "✅ Present" || echo "❌ Missing") |
          | **Redis** | $REDIS_STATUS | $(command -v redis-server >/dev/null 2>&1 && redis-server --version 2>&1 | head -1 | cut -d' ' -f3 | cut -d'=' -f2 || echo "Not installed") | $([ -f /etc/redis/redis.conf ] && echo "✅ Present" || echo "❌ Missing") |
          
          ## 📊 Build Environment
          - **OS**: Ubuntu $(lsb_release -rs)
          - **Architecture**: $(uname -m)
          - **Build Time**: $(date)
          - **Workflow**: ${{ github.workflow }}
          - **Run ID**: ${{ github.run_id }}
          
          ## 📁 Log Files Generated
          $(ls -la /tmp/ci-logs/ 2>/dev/null | grep -E '\.log$' | wc -l) log files created:
          $(ls -1 /tmp/ci-logs/*.log 2>/dev/null | sed 's/.*\//- /' || echo "- No log files found")
          
          ## 💾 Disk Usage
          **Build Directory**: $(du -sh /usr/local/bin/enginescript/ 2>/dev/null | cut -f1 || echo "Unknown")
          **Logs Directory**: $(du -sh /tmp/ci-logs/ 2>/dev/null | cut -f1 || echo "Unknown")
          **Available Space**: $(df -h / | tail -1 | awk '{print $4}')
          
          EOF
          
          echo "📋 Test Summary Generated:"
          cat /tmp/ci-logs/test-summary.md
          
          # Set output for potential PR commenting
          echo "OVERALL_STATUS=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          echo "NGINX_STATUS=$NGINX_STATUS" >> $GITHUB_OUTPUT
          echo "PHP_STATUS=$PHP_STATUS" >> $GITHUB_OUTPUT
          echo "MARIADB_STATUS=$MARIADB_STATUS" >> $GITHUB_OUTPUT
          echo "REDIS_STATUS=$REDIS_STATUS" >> $GITHUB_OUTPUT
          
          # Create simple status for PR comment
          if [ "$OVERALL_STATUS" = "✅ SUCCESS" ]; then
            cat > /tmp/ci-logs/pr-comment.md << EOF
          🎉 **EngineScript Build Test PASSED** 🎉
          
          All core components built successfully:
          - Nginx: $NGINX_STATUS
          - PHP: $PHP_STATUS
          - MariaDB: $MARIADB_STATUS
          - Redis: $REDIS_STATUS
          
          ✅ Ready for deployment testing!
          EOF
          else
            cat > /tmp/ci-logs/pr-comment.md << EOF
          ⚠️ **EngineScript Build Test FAILED** ⚠️
          
          Component status:
          - Nginx: $NGINX_STATUS
          - PHP: $PHP_STATUS
          - MariaDB: $MARIADB_STATUS
          - Redis: $REDIS_STATUS
          
          📋 Please review the build logs for detailed error information.
          EOF
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const comment = fs.readFileSync('/tmp/ci-logs/pr-comment.md', 'utf8');
              
              // Find existing comment to update
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('EngineScript Build Test')
              );
              
              if (botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: comment
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not read PR comment file or post comment:', error);
              console.log('PR commenting failed, but this is not critical for the build');
            }

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-build-logs-ubuntu-24.04
          path: |
            /tmp/ci-logs/*
            /var/log/EngineScript/
          retention-days: 7
          
      - name: Final Status Check
        if: always()
        run: |
          echo "🏁 Final workflow status check..."
          
          # Check if critical components are working
          FAILED_COMPONENTS=0
          
          if ! [ -f /usr/sbin/nginx ] || ! /usr/sbin/nginx -v >/dev/null 2>&1; then
            echo "❌ Nginx build/installation failed"
            FAILED_COMPONENTS=$((FAILED_COMPONENTS + 1))
          fi
          
          if ! [ -f /usr/local/bin/php ] || ! /usr/local/bin/php -v >/dev/null 2>&1; then
            echo "❌ PHP build/installation failed"
            FAILED_COMPONENTS=$((FAILED_COMPONENTS + 1))
          fi
          
          if ! [ -f /usr/local/mysql/bin/mysql ] || ! /usr/local/mysql/bin/mysql --version >/dev/null 2>&1; then
            echo "❌ MariaDB installation failed"
            FAILED_COMPONENTS=$((FAILED_COMPONENTS + 1))
          fi
          
          if ! command -v redis-server >/dev/null 2>&1 || ! redis-server --version >/dev/null 2>&1; then
            echo "❌ Redis installation failed"
            FAILED_COMPONENTS=$((FAILED_COMPONENTS + 1))
          fi
          
          if [ $FAILED_COMPONENTS -eq 0 ]; then
            echo "🎉 All core components successfully built and installed!"
            echo "✅ EngineScript build test PASSED"
            exit 0
          else
            echo "💥 $FAILED_COMPONENTS core component(s) failed to build/install"
            echo "❌ EngineScript build test FAILED"
            exit 1
          fi