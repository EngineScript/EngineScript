name: EngineScript Build Test

on:
  pull_request:
    # Run on all pull requests for comprehensive testing
  push:
    # Run on all pushes to any branch for comprehensive testing
    paths:
      - 'scripts/**'
      - 'enginescript-variables.txt'
      - 'config/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  full-build-test:
    name: Full EngineScript Build Test
    runs-on: ubuntu-24.04
    timeout-minutes: 180
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Maximize Disk Space
        run: |
          echo "üßπ Freeing up disk space for full build..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/graalvm
          sudo rm -rf /usr/local/.ghcup
          sudo docker system prune -af
          sudo apt-get autoremove -y
          sudo apt-get autoclean
          echo "üíæ Available disk space:"
          df -h

      - name: Setup Full Build Environment
        run: |
          echo "üèóÔ∏è Setting up full build environment..."
          sudo apt-get update -qq
          
          # Create required directories including log directories
          sudo mkdir -p /usr/local/bin/enginescript /home/EngineScript /var/log/EngineScript /tmp/ci-logs
          
          # Copy entire project to build location
          sudo cp -r . /usr/local/bin/enginescript/
          
          # Copy CI configuration
          sudo cp .github/ci-config/enginescript-install-options-ci.txt /home/EngineScript/enginescript-install-options.txt
          
          # CRITICAL: Set executable permissions immediately after copying
          echo "üîß Setting executable permissions on all scripts..."
          sudo find /usr/local/bin/enginescript -type f -name "*.sh" -exec chmod +x {} \;
          sudo chmod +x /usr/local/bin/enginescript/setup.sh
          
          # Initialize main CI log with timestamp
          echo "EngineScript CI Build Started: $(date)" | sudo tee /tmp/ci-logs/ci-main.log
          echo "Build environment: Ubuntu $(lsb_release -rs)" | sudo tee -a /tmp/ci-logs/ci-main.log
          
          echo "‚úÖ Full build environment setup completed with proper permissions"

      - name: Run Base System Setup
        run: |
          echo "üîß Running base system setup..."
          cd /usr/local/bin/enginescript
          
          # Run setup.sh which handles initial system configuration
          sudo ./setup.sh 2>&1 | sudo tee /tmp/ci-logs/setup.log || {
            echo "‚ùå Base setup failed"
            echo "üìä Setup log:"
            cat /tmp/ci-logs/setup.log
            exit 1
          }
          
          # Ensure log is flushed and has content
          sudo sync
          if [ -s /tmp/ci-logs/setup.log ]; then
            echo "‚úÖ Setup log created successfully ($(wc -l < /tmp/ci-logs/setup.log) lines)"
          else
            echo "‚ö†Ô∏è Setup log is empty, creating summary"
            echo "Setup completed at $(date)" | sudo tee /tmp/ci-logs/setup.log
          fi

      - name: Install Base EngineScript Components
        run: |
          echo "üîß Installing base EngineScript components in proper sequence..."
          cd /usr/local/bin/enginescript/scripts/install
          
          # Source variables and set CI mode
          source /usr/local/bin/enginescript/enginescript-variables.txt
          source /home/EngineScript/enginescript-install-options.txt
          export DEBUG_INSTALL=0  # Disable debug prompts for CI
          
          # Step 1: Install repositories
          echo "üì¶ Installing repositories..."
          sudo timeout 600 ./repositories/repositories-install.sh 2>&1 | sudo tee /tmp/ci-logs/repos.log || {
            echo "‚ö†Ô∏è Repositories installation had issues, continuing..."
            tail -30 /tmp/ci-logs/repos.log
          }
          sudo sync
          
          # Step 2: Remove preinstalled software
          echo "üóëÔ∏è Removing preinstalled software..."
          sudo timeout 300 ./removes/remove-preinstalled.sh 2>&1 | sudo tee /tmp/ci-logs/removes.log || {
            echo "‚ö†Ô∏è Remove preinstalled software had issues, continuing..."
            tail -30 /tmp/ci-logs/removes.log
          }
          sudo sync
          
          # Step 3: Block unwanted packages
          echo "üö´ Blocking unwanted packages..."
          sudo timeout 300 ./block/package-block.sh 2>&1 | sudo tee /tmp/ci-logs/block.log || {
            echo "‚ö†Ô∏è Package blocking had issues, continuing..."
            tail -30 /tmp/ci-logs/block.log
          }
          sudo sync
          
          # Step 4: Install dependencies
          echo "üìö Installing dependencies..."
          sudo timeout 900 ./depends/depends-install.sh 2>&1 | sudo tee /tmp/ci-logs/depends.log || {
            echo "‚ö†Ô∏è Dependencies installation had issues, continuing..."
            tail -50 /tmp/ci-logs/depends.log
          }
          sudo sync
          
          # Step 5: Install cron
          echo "‚è∞ Installing cron..."
          sudo timeout 300 ./cron/cron-install.sh 2>&1 | sudo tee /tmp/ci-logs/cron.log || {
            echo "‚ö†Ô∏è Cron installation had issues, continuing..."
            tail -30 /tmp/ci-logs/cron.log
          }
          sudo sync
          
          # Step 6: Install ACME.sh
          echo "üîê Installing ACME.sh..."
          sudo timeout 300 ./acme/acme-install.sh 2>&1 | sudo tee /tmp/ci-logs/acme.log || {
            echo "‚ö†Ô∏è ACME.sh installation had issues, continuing..."
            tail -30 /tmp/ci-logs/acme.log
          }
          sudo sync
          
          # Step 7: Install GCC
          echo "üî® Installing GCC..."
          sudo timeout 600 ./gcc/gcc-install.sh 2>&1 | sudo tee /tmp/ci-logs/gcc.log || {
            echo "‚ö†Ô∏è GCC installation had issues, continuing..."
            tail -30 /tmp/ci-logs/gcc.log
          }
          sudo sync
          
          # Step 8: Install OpenSSL
          echo "üîí Installing OpenSSL..."
          sudo timeout 900 ./openssl/openssl-install.sh 2>&1 | sudo tee /tmp/ci-logs/openssl.log || {
            echo "‚ö†Ô∏è OpenSSL installation had issues, continuing..."
            tail -50 /tmp/ci-logs/openssl.log
          }
          sudo sync
          
          # Step 9: Install Swap
          echo "üíæ Installing Swap..."
          sudo timeout 300 ./swap/swap-install.sh 2>&1 | sudo tee /tmp/ci-logs/swap.log || {
            echo "‚ö†Ô∏è Swap installation had issues, continuing..."
            tail -30 /tmp/ci-logs/swap.log
          }
          sudo sync
          
          # Skip kernel tweaks (not suitable for CI)
          echo "‚è≠Ô∏è Skipping kernel tweaks (not suitable for CI environment)"
          
          # Step 10: Install PCRE
          echo "üìù Installing PCRE..."
          sudo timeout 600 ./pcre/pcre-install.sh 2>&1 | sudo tee /tmp/ci-logs/pcre.log || {
            echo "‚ö†Ô∏è PCRE installation had issues, continuing..."
            tail -30 /tmp/ci-logs/pcre.log
          }
          sudo sync
          
          # Step 11: Install Zlib
          echo "üì¶ Installing Zlib..."
          sudo timeout 600 ./zlib/zlib-install.sh 2>&1 | sudo tee /tmp/ci-logs/zlib.log || {
            echo "‚ö†Ô∏è Zlib installation had issues, continuing..."
            tail -30 /tmp/ci-logs/zlib.log
          }
          sudo sync
          
          # Step 12: Install liburing
          echo "‚ö° Installing liburing..."
          sudo timeout 600 ./liburing/liburing-install.sh 2>&1 | sudo tee /tmp/ci-logs/liburing.log || {
            echo "‚ö†Ô∏è liburing installation had issues, continuing..."
            tail -30 /tmp/ci-logs/liburing.log
          }
          sudo sync
          
          # Skip UFW (firewall not needed for CI)
          echo "‚è≠Ô∏è Skipping UFW (firewall not needed for CI environment)"
          
          echo "‚úÖ Base EngineScript installation completed"

      - name: Build Core Components
        run: |
          echo "üî® Building core components..."
          cd /usr/local/bin/enginescript/scripts/install
          
          # Build Nginx with custom optimizations
          echo "üåê Building Nginx..."
          sudo timeout 1200 ./nginx/nginx-install.sh 2>&1 | sudo tee /tmp/ci-logs/nginx.log || {
            echo "‚ùå Nginx build failed"
            tail -50 /tmp/ci-logs/nginx.log
            exit 1
          }
          
          # Ensure log is flushed and has content
          sudo sync
          if [ -s /tmp/ci-logs/nginx.log ]; then
            echo "‚úÖ Nginx build log created successfully ($(wc -l < /tmp/ci-logs/nginx.log) lines)"
          else
            echo "‚ö†Ô∏è Nginx build log is empty, creating summary"
            echo "Nginx build completed at $(date)" | sudo tee /tmp/ci-logs/nginx.log
          fi
          
          # Build PHP
          echo "üêò Building PHP..."
          sudo timeout 1800 ./php/php-install.sh 2>&1 | sudo tee /tmp/ci-logs/php.log || {
            echo "‚ùå PHP build failed"
            tail -50 /tmp/ci-logs/php.log
            exit 1
          }
          
          # Ensure log is flushed and has content
          sudo sync
          if [ -s /tmp/ci-logs/php.log ]; then
            echo "‚úÖ PHP build log created successfully ($(wc -l < /tmp/ci-logs/php.log) lines)"
          else
            echo "‚ö†Ô∏è PHP build log is empty, creating summary"
            echo "PHP build completed at $(date)" | sudo tee /tmp/ci-logs/php.log
          fi
          
          echo "‚úÖ Core components build completed"

      - name: Install Database and Cache
        run: |
          echo "üóÑÔ∏è Installing database and cache systems..."
          cd /usr/local/bin/enginescript/scripts/install
          
          # Install MariaDB
          echo "üê¨ Installing MariaDB..."
          sudo timeout 900 ./mariadb/mariadb-install.sh 2>&1 | sudo tee /tmp/ci-logs/mariadb.log || {
            echo "‚ùå MariaDB installation failed"
            tail -50 /tmp/ci-logs/mariadb.log
            exit 1
          }
          
          # Ensure log is flushed and has content
          sudo sync
          if [ -s /tmp/ci-logs/mariadb.log ]; then
            echo "‚úÖ MariaDB install log created successfully ($(wc -l < /tmp/ci-logs/mariadb.log) lines)"
          else
            echo "‚ö†Ô∏è MariaDB install log is empty, creating summary"
            echo "MariaDB installation completed at $(date)" | sudo tee /tmp/ci-logs/mariadb.log
          fi
          
          # Install Redis
          echo "üî¥ Installing Redis..."
          sudo timeout 600 ./redis/redis-install.sh 2>&1 | sudo tee /tmp/ci-logs/redis.log || {
            echo "‚ùå Redis installation failed"
            tail -50 /tmp/ci-logs/redis.log
            exit 1
          }
          
          # Ensure log is flushed and has content
          sudo sync
          if [ -s /tmp/ci-logs/redis.log ]; then
            echo "‚úÖ Redis install log created successfully ($(wc -l < /tmp/ci-logs/redis.log) lines)"
          else
            echo "‚ö†Ô∏è Redis install log is empty, creating summary"
            echo "Redis installation completed at $(date)" | sudo tee /tmp/ci-logs/redis.log
          fi

      - name: Verify Full Build Results
        if: always()
        run: |
          echo "üîç Verifying full build results..."
          
          # Check if key binaries exist
          if [ -f /usr/sbin/nginx ]; then
            echo "‚úÖ Nginx binary installed at /usr/sbin/nginx"
            /usr/sbin/nginx -v 2>&1 || echo "‚ö†Ô∏è Nginx version check failed"
          else
            echo "‚ùå Nginx binary missing"
          fi
          
          if [ -f /usr/local/bin/php ]; then
            echo "‚úÖ PHP binary installed at /usr/local/bin/php"
            /usr/local/bin/php -v 2>&1 || echo "‚ö†Ô∏è PHP version check failed"
          else
            echo "‚ùå PHP binary missing"
          fi
          
          if [ -f /usr/local/mysql/bin/mysql ]; then
            echo "‚úÖ MariaDB binary installed at /usr/local/mysql/bin/mysql"
            /usr/local/mysql/bin/mysql --version 2>&1 || echo "‚ö†Ô∏è MariaDB version check failed"
          else
            echo "‚ùå MariaDB binary missing"
          fi
          
          if command -v redis-server &> /dev/null; then
            echo "‚úÖ Redis server installed and available"
            redis-server --version 2>&1 || echo "‚ö†Ô∏è Redis version check failed"
          else
            echo "‚ùå Redis server missing"
          fi
          
          # Check configuration files
          echo "üìÅ Configuration files:"
          [ -f /etc/nginx/nginx.conf ] && echo "‚úÖ Nginx config exists" || echo "‚ùå Nginx config missing"
          [ -f /usr/local/etc/php.ini ] && echo "‚úÖ PHP config exists" || echo "‚ùå PHP config missing"
          [ -f /etc/mysql/mariadb.cnf ] && echo "‚úÖ MariaDB config exists" || echo "‚ùå MariaDB config missing"
          [ -f /etc/redis/redis.conf ] && echo "‚úÖ Redis config exists" || echo "‚ùå Redis config missing"
          
          # Show disk usage
          echo "üíæ Final disk usage:"
          df -h
          
          echo "üìä Build artifacts summary:"
          du -sh /usr/local/bin/enginescript/ 2>/dev/null || echo "Build directory size unknown"
          du -sh /var/log/EngineScript/ 2>/dev/null || echo "Log directory size unknown"

      - name: Report Test Results
        if: always()
        run: |
          echo "üìã Generating comprehensive test results..."
          
          # Initialize result variables
          NGINX_STATUS="‚ùå Failed"
          PHP_STATUS="‚ùå Failed"
          MARIADB_STATUS="‚ùå Failed"
          REDIS_STATUS="‚ùå Failed"
          OVERALL_STATUS="‚ùå FAILED"
          
          # Check component status based on binaries and logs
          if [ -f /usr/sbin/nginx ] && /usr/sbin/nginx -v >/dev/null 2>&1; then
            NGINX_STATUS="‚úÖ Success"
          fi
          
          if [ -f /usr/local/bin/php ] && /usr/local/bin/php -v >/dev/null 2>&1; then
            PHP_STATUS="‚úÖ Success"
          fi
          
          if [ -f /usr/local/mysql/bin/mysql ] && /usr/local/mysql/bin/mysql --version >/dev/null 2>&1; then
            MARIADB_STATUS="‚úÖ Success"
          fi
          
          if command -v redis-server >/dev/null 2>&1 && redis-server --version >/dev/null 2>&1; then
            REDIS_STATUS="‚úÖ Success"
          fi
          
          # Determine overall status
          if [[ "$NGINX_STATUS" == "‚úÖ Success" && "$PHP_STATUS" == "‚úÖ Success" && "$MARIADB_STATUS" == "‚úÖ Success" && "$REDIS_STATUS" == "‚úÖ Success" ]]; then
            OVERALL_STATUS="‚úÖ SUCCESS"
          fi
          
          # Create comprehensive test summary
          cat > /tmp/ci-logs/test-summary.md << 'EOF'
          # EngineScript Build Test Results
          
          ## üéØ Overall Status
          **$OVERALL_STATUS**
          
          ## üì¶ Component Results
          
          | Component | Status | Version | Config |
          |-----------|--------|---------|--------|
          | **Nginx** | $NGINX_STATUS | $([ -f /usr/sbin/nginx ] && /usr/sbin/nginx -v 2>&1 \| head -1 \| cut -d' ' -f3 \| cut -d'/' -f2 || echo "Not installed") | $([ -f /etc/nginx/nginx.conf ] && echo "‚úÖ Present" || echo "‚ùå Missing") |
          | **PHP** | $PHP_STATUS | $([ -f /usr/local/bin/php ] && /usr/local/bin/php -v 2>&1 \| head -1 \| cut -d' ' -f2 || echo "Not installed") | $([ -f /usr/local/etc/php.ini ] && echo "‚úÖ Present" || echo "‚ùå Missing") |
          | **MariaDB** | $MARIADB_STATUS | $([ -f /usr/local/mysql/bin/mysql ] && /usr/local/mysql/bin/mysql --version 2>&1 \| head -1 \| cut -d' ' -f6 \| cut -d',' -f1 || echo "Not installed") | $([ -f /etc/mysql/mariadb.cnf ] && echo "‚úÖ Present" || echo "‚ùå Missing") |
          | **Redis** | $REDIS_STATUS | $(command -v redis-server >/dev/null 2>&1 && redis-server --version 2>&1 \| head -1 \| cut -d' ' -f3 \| cut -d'=' -f2 || echo "Not installed") | $([ -f /etc/redis/redis.conf ] && echo "‚úÖ Present" || echo "‚ùå Missing") |
          
          ## üìä Build Environment
          - **OS**: Ubuntu $(lsb_release -rs)
          - **Architecture**: $(uname -m)
          - **Build Time**: $(date)
          - **Workflow**: ${{ github.workflow }}
          - **Run ID**: ${{ github.run_id }}
          
          ## üìÅ Log Files Generated
          $(ls -la /tmp/ci-logs/ 2>/dev/null | grep -E '\.log$' | wc -l) log files created:
          $(ls -1 /tmp/ci-logs/*.log 2>/dev/null | sed 's/.*\//- /' || echo "- No log files found")
          
          ## üíæ Disk Usage
          **Build Directory**: $(du -sh /usr/local/bin/enginescript/ 2>/dev/null | cut -f1 || echo "Unknown")
          **Logs Directory**: $(du -sh /tmp/ci-logs/ 2>/dev/null | cut -f1 || echo "Unknown")
          **Available Space**: $(df -h / | tail -1 | awk '{print $4}')
          
          EOF
          
          # Process the template to expand variables
          envsubst < /tmp/ci-logs/test-summary.md > /tmp/ci-logs/test-summary-final.md
          
          echo "üìã Test Summary Generated:"
          cat /tmp/ci-logs/test-summary-final.md
          
          # Set output for potential PR commenting
          echo "OVERALL_STATUS=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          echo "NGINX_STATUS=$NGINX_STATUS" >> $GITHUB_OUTPUT
          echo "PHP_STATUS=$PHP_STATUS" >> $GITHUB_OUTPUT
          echo "MARIADB_STATUS=$MARIADB_STATUS" >> $GITHUB_OUTPUT
          echo "REDIS_STATUS=$REDIS_STATUS" >> $GITHUB_OUTPUT
          
          # Create simple status for PR comment
          if [ "$OVERALL_STATUS" = "‚úÖ SUCCESS" ]; then
            echo "üéâ **EngineScript Build Test PASSED** üéâ" > /tmp/ci-logs/pr-comment.md
            echo "" >> /tmp/ci-logs/pr-comment.md
            echo "All core components built successfully:" >> /tmp/ci-logs/pr-comment.md
            echo "- Nginx: $NGINX_STATUS" >> /tmp/ci-logs/pr-comment.md
            echo "- PHP: $PHP_STATUS" >> /tmp/ci-logs/pr-comment.md
            echo "- MariaDB: $MARIADB_STATUS" >> /tmp/ci-logs/pr-comment.md
            echo "- Redis: $REDIS_STATUS" >> /tmp/ci-logs/pr-comment.md
            echo "" >> /tmp/ci-logs/pr-comment.md
            echo "‚úÖ Ready for deployment testing!" >> /tmp/ci-logs/pr-comment.md
          else
            echo "‚ö†Ô∏è **EngineScript Build Test FAILED** ‚ö†Ô∏è" > /tmp/ci-logs/pr-comment.md
            echo "" >> /tmp/ci-logs/pr-comment.md
            echo "Component status:" >> /tmp/ci-logs/pr-comment.md
            echo "- Nginx: $NGINX_STATUS" >> /tmp/ci-logs/pr-comment.md
            echo "- PHP: $PHP_STATUS" >> /tmp/ci-logs/pr-comment.md
            echo "- MariaDB: $MARIADB_STATUS" >> /tmp/ci-logs/pr-comment.md
            echo "- Redis: $REDIS_STATUS" >> /tmp/ci-logs/pr-comment.md
            echo "" >> /tmp/ci-logs/pr-comment.md
            echo "üìã Please review the build logs for detailed error information." >> /tmp/ci-logs/pr-comment.md
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const comment = fs.readFileSync('/tmp/ci-logs/pr-comment.md', 'utf8');
              
              // Find existing comment to update
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('EngineScript Build Test')
              );
              
              if (botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: comment
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not read PR comment file or post comment:', error);
              console.log('PR commenting failed, but this is not critical for the build');
            }

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-build-logs-ubuntu-24.04
          path: |
            /tmp/ci-logs/*
            /var/log/EngineScript/
          retention-days: 7
          
      - name: Final Status Check
        if: always()
        run: |
          echo "üèÅ Final workflow status check..."
          
          # Check if critical components are working
          FAILED_COMPONENTS=0
          
          if ! [ -f /usr/sbin/nginx ] || ! /usr/sbin/nginx -v >/dev/null 2>&1; then
            echo "‚ùå Nginx build/installation failed"
            FAILED_COMPONENTS=$((FAILED_COMPONENTS + 1))
          fi
          
          if ! [ -f /usr/local/bin/php ] || ! /usr/local/bin/php -v >/dev/null 2>&1; then
            echo "‚ùå PHP build/installation failed"
            FAILED_COMPONENTS=$((FAILED_COMPONENTS + 1))
          fi
          
          if ! [ -f /usr/local/mysql/bin/mysql ] || ! /usr/local/mysql/bin/mysql --version >/dev/null 2>&1; then
            echo "‚ùå MariaDB installation failed"
            FAILED_COMPONENTS=$((FAILED_COMPONENTS + 1))
          fi
          
          if ! command -v redis-server >/dev/null 2>&1 || ! redis-server --version >/dev/null 2>&1; then
            echo "‚ùå Redis installation failed"
            FAILED_COMPONENTS=$((FAILED_COMPONENTS + 1))
          fi
          
          if [ $FAILED_COMPONENTS -eq 0 ]; then
            echo "üéâ All core components successfully built and installed!"
            echo "‚úÖ EngineScript build test PASSED"
            exit 0
          else
            echo "üí• $FAILED_COMPONENTS core component(s) failed to build/install"
            echo "‚ùå EngineScript build test FAILED"
            exit 1
          fi