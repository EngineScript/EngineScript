name: EngineScript Build Test

on:
  pull_request:
    # Run on all pull requests for comprehensive testing
    # Specific path triggers maintained for push events to optimize CI usage
  push:
    branches:
      - main
    paths:
      - 'scripts/**'
      - 'enginescript-variables.txt'
      - 'config/**'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope'
        required: true
        default: 'component'
        type: choice
        options:
          - component
          - full
          - nginx-only
          - php-only
          - mariadb-only
          - redis-only
      ubuntu_version:
        description: 'Ubuntu version to test'
        required: true
        default: '24.04'
        type: choice
        options:
          - '24.04'

permissions:
  contents: read
  issues: write

jobs:
  determine-test-scope:
    name: Determine Test Scope
    runs-on: ubuntu-24.04
    if: github.event_name == 'pull_request'
    outputs:
      test_scope: ${{ steps.scope.outputs.test_scope }}
      run_nginx_specific: ${{ steps.scope.outputs.run_nginx_specific }}
      run_mariadb_specific: ${{ steps.scope.outputs.run_mariadb_specific }}
      run_redis_specific: ${{ steps.scope.outputs.run_redis_specific }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Determine Test Scope Based on Changed Files
        id: scope
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          else
            # For manual runs, test everything
            echo "test_scope=component" >> $GITHUB_OUTPUT
            echo "run_nginx_specific=true" >> $GITHUB_OUTPUT
            echo "run_mariadb_specific=true" >> $GITHUB_OUTPUT
            echo "run_redis_specific=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Initialize flags
          NGINX_CHANGES=false
          MARIADB_CHANGES=false
          REDIS_CHANGES=false
          CORE_CHANGES=false
          
          # Check for specific component changes
          echo "$CHANGED_FILES" | grep -E "(scripts/install/nginx/|scripts/install/openssl/|scripts/install/pcre/|scripts/install/zlib/)" && NGINX_CHANGES=true || true
          echo "$CHANGED_FILES" | grep -E "scripts/install/mariadb/" && MARIADB_CHANGES=true || true
          echo "$CHANGED_FILES" | grep -E "scripts/install/redis/" && REDIS_CHANGES=true || true
          echo "$CHANGED_FILES" | grep -E "(scripts/install/|enginescript-variables.txt|config/)" && CORE_CHANGES=true || true
          
          # Determine test scope
          if [ "$CORE_CHANGES" = "true" ] || [ "$NGINX_CHANGES" = "true" ] || [ "$MARIADB_CHANGES" = "true" ] || [ "$REDIS_CHANGES" = "true" ]; then
            echo "test_scope=component" >> $GITHUB_OUTPUT
          else
            echo "test_scope=dependencies" >> $GITHUB_OUTPUT
          fi
          
          # Set specific test flags
          echo "run_nginx_specific=$NGINX_CHANGES" >> $GITHUB_OUTPUT
          echo "run_mariadb_specific=$MARIADB_CHANGES" >> $GITHUB_OUTPUT
          echo "run_redis_specific=$REDIS_CHANGES" >> $GITHUB_OUTPUT
          
          echo "Test scope determined: component"
          echo "Nginx specific tests: $NGINX_CHANGES"
          echo "MariaDB specific tests: $MARIADB_CHANGES" 
          echo "Redis specific tests: $REDIS_CHANGES"

  validate-scripts:
    name: Validate Shell Scripts
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Validate Shell Scripts
        run: |
          echo "üîç Validating shell scripts..."
          find scripts/ -name "*.sh" -type f | while read -r script; do
            echo "Checking: $script"
            shellcheck "$script" || echo "‚ùå ShellCheck failed for $script"
          done
          
          # Check main install script
          shellcheck scripts/install/enginescript-install.sh || echo "‚ùå Main install script has issues"

      - name: Check Script Permissions
        run: |
          echo "üîç Checking script permissions..."
          find scripts/ -name "*.sh" -type f ! -perm -u+x | while read -r script; do
            echo "‚ö†Ô∏è Script not executable: $script"
          done

  component-build-test:
    name: Component Build Test
    runs-on: ubuntu-24.04
    if: ${{ always() && (github.event.inputs.test_scope == 'component' || github.event.inputs.test_scope == '' || (github.event_name == 'pull_request' && needs.determine-test-scope.outputs.test_scope == 'component')) }}
    needs: 
      - validate-scripts
      - determine-test-scope
    strategy:
      fail-fast: false
      matrix:
        component: ['dependencies', 'nginx', 'php', 'openssl', 'mariadb', 'redis']
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Free Disk Space
        run: |
          # Free up disk space for compilation
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force

      - name: Setup CI Environment
        run: |
          # Update system first
          sudo apt-get update
          
          # Install minimal required packages for CI
          sudo apt-get install -y \
            build-essential \
            wget \
            curl \
            git \
            dos2unix \
            pwgen \
            boxes
          
          # Create EngineScript directory structure
          sudo mkdir -p /usr/local/bin/enginescript
          sudo mkdir -p /home/EngineScript
          sudo mkdir -p /var/log/EngineScript
          sudo mkdir -p /tmp
          
          # Copy all scripts and config files
          sudo cp -r . /usr/local/bin/enginescript/
          sudo cp .github/ci-config/enginescript-install-options-ci.txt /home/EngineScript/enginescript-install-options.txt
          
          # Set proper permissions
          sudo find /usr/local/bin/enginescript -type d,f -exec chmod 755 {} \;
          sudo chown -R root:root /usr/local/bin/enginescript
          sudo find /usr/local/bin/enginescript -type f -iname "*.sh" -exec chmod +x {} \;
          
          # Create log files
          sudo touch /var/log/EngineScript/install-error-log.txt
          sudo touch /var/log/EngineScript/install-log.txt
          
          echo "‚úÖ Basic CI environment setup completed"

      - name: Run EngineScript Base Setup (Lines 1-40)
        run: |
          echo "üîß Running EngineScript base setup..."
          cd /usr/local/bin/enginescript
          
          # Run setup.sh to prepare the environment
          sudo timeout 300 ./setup.sh 2>&1 | tee /tmp/setup.log || {
            echo "‚ùå Setup script failed"
            tail -50 /tmp/setup.log
            exit 1
          }
          
          echo "‚úÖ Base setup completed"

      - name: Install Base EngineScript Components
        run: |
          echo "üîß Installing base EngineScript components in proper sequence..."
          cd /usr/local/bin/enginescript/scripts/install
          
          # Source variables and set CI mode
          source /usr/local/bin/enginescript/enginescript-variables.txt
          source /home/EngineScript/enginescript-install-options.txt
          export DEBUG_INSTALL=0  # Disable debug prompts for CI
          
          # Step 1: Install repositories (line 287)
          echo "üì¶ Installing repositories..."
          sudo timeout 600 ./repositories/repositories-install.sh 2>&1 | tee /tmp/repos.log || {
            echo "‚ö†Ô∏è Repositories installation had issues, continuing..."
            tail -30 /tmp/repos.log
          }
          
          # Step 2: Remove preinstalled software (line 298)
          echo "üóëÔ∏è Removing preinstalled software..."
          sudo timeout 300 ./removes/remove-preinstalled.sh 2>&1 | tee /tmp/removes.log || {
            echo "‚ö†Ô∏è Remove preinstalled software had issues, continuing..."
            tail -30 /tmp/removes.log
          }
          
          # Step 3: Block unwanted packages (line 309)
          echo "üö´ Blocking unwanted packages..."
          sudo timeout 300 ./block/package-block.sh 2>&1 | tee /tmp/block.log || {
            echo "‚ö†Ô∏è Package blocking had issues, continuing..."
            tail -30 /tmp/block.log
          }
          
          # Step 4: Install dependencies (line 322)
          echo "üìö Installing dependencies..."
          sudo timeout 900 ./depends/depends-install.sh 2>&1 | tee /tmp/depends.log || {
            echo "‚ö†Ô∏è Dependencies installation had issues, continuing..."
            tail -50 /tmp/depends.log
          }
          
          # Step 5: Install cron (line 332)
          echo "‚è∞ Installing cron..."
          sudo timeout 300 ./cron/cron-install.sh 2>&1 | tee /tmp/cron.log || {
            echo "‚ö†Ô∏è Cron installation had issues, continuing..."
            tail -30 /tmp/cron.log
          }
          
          # Step 6: Install ACME.sh (line 343)
          echo "üîê Installing ACME.sh..."
          sudo timeout 300 ./acme/acme-install.sh 2>&1 | tee /tmp/acme.log || {
            echo "‚ö†Ô∏è ACME.sh installation had issues, continuing..."
            tail -30 /tmp/acme.log
          }
          
          # Step 7: Install GCC (line 354)
          echo "üî® Installing GCC..."
          sudo timeout 600 ./gcc/gcc-install.sh 2>&1 | tee /tmp/gcc.log || {
            echo "‚ö†Ô∏è GCC installation had issues, continuing..."
            tail -30 /tmp/gcc.log
          }
          
          # Step 8: Install OpenSSL (line 365)
          echo "üîí Installing OpenSSL..."
          sudo timeout 900 ./openssl/openssl-install.sh 2>&1 | tee /tmp/openssl.log || {
            echo "‚ö†Ô∏è OpenSSL installation had issues, continuing..."
            tail -50 /tmp/openssl.log
          }
          
          # Step 9: Install Swap (line 376)
          echo "üíæ Installing Swap..."
          sudo timeout 300 ./swap/swap-install.sh 2>&1 | tee /tmp/swap.log || {
            echo "‚ö†Ô∏è Swap installation had issues, continuing..."
            tail -30 /tmp/swap.log
          }
          
          # Skip Step 10: Kernel tweaks (line 387) - not suitable for CI
          echo "‚è≠Ô∏è Skipping kernel tweaks (not suitable for CI environment)"
          
          # Step 11: Install PCRE (line 431)
          echo "üìù Installing PCRE..."
          sudo timeout 600 ./pcre/pcre-install.sh 2>&1 | tee /tmp/pcre.log || {
            echo "‚ö†Ô∏è PCRE installation had issues, continuing..."
            tail -30 /tmp/pcre.log
          }
          
          # Step 12: Install Zlib (line 442)
          echo "üì¶ Installing Zlib..."
          sudo timeout 600 ./zlib/zlib-install.sh 2>&1 | tee /tmp/zlib.log || {
            echo "‚ö†Ô∏è Zlib installation had issues, continuing..."
            tail -30 /tmp/zlib.log
          }
          
          # Step 13: Install liburing (line 453)
          echo "‚ö° Installing liburing..."
          sudo timeout 600 ./liburing/liburing-install.sh 2>&1 | tee /tmp/liburing.log || {
            echo "‚ö†Ô∏è liburing installation had issues, continuing..."
            tail -30 /tmp/liburing.log
          }
          
          # Skip Step 14: UFW (line 464) - firewall not needed for CI
          echo "‚è≠Ô∏è Skipping UFW (firewall not needed for CI environment)"
          
          echo "‚úÖ Base EngineScript installation completed"

      - name: Test Dependencies Installation
        if: matrix.component == 'dependencies'
        run: |
          echo "‚úÖ Dependencies already installed as part of base setup"
          echo "üîç Verifying dependency installation..."
          
          # Check if key dependencies are available
          which gcc && echo "‚úÖ GCC available" || echo "‚ùå GCC missing"
          which make && echo "‚úÖ Make available" || echo "‚ùå Make missing"
          which wget && echo "‚úÖ Wget available" || echo "‚ùå Wget missing"
          which curl && echo "‚úÖ Curl available" || echo "‚ùå Curl missing"
          which git && echo "‚úÖ Git available" || echo "‚ùå Git missing"
          
          echo "‚úÖ Dependencies verification completed"

      - name: Test OpenSSL Installation  
        if: matrix.component == 'openssl'
        run: |
          echo "‚úÖ OpenSSL already installed as part of base setup"
          echo "üîç Verifying OpenSSL installation..."
          
          # Verify OpenSSL was compiled and installed
          if [ -f /usr/local/ssl/bin/openssl ]; then
            echo "‚úÖ OpenSSL binary found"
            /usr/local/ssl/bin/openssl version
          else
            echo "‚ùå OpenSSL binary not found, attempting installation..."
            cd /usr/local/bin/enginescript/scripts/install/openssl
            sudo timeout 900 ./openssl-install.sh 2>&1 | tee /tmp/openssl-install.log || {
              echo "‚ùå OpenSSL installation failed"
              tail -100 /tmp/openssl-install.log
              exit 1
            }
          fi

      - name: Test Nginx Compilation
        if: matrix.component == 'nginx'
        run: |
          echo "üîß Testing Nginx compilation with base EngineScript setup..."
          
          # Verify dependencies are installed from base setup
          echo "üîç Verifying dependencies..."
          [ -f /usr/local/ssl/bin/openssl ] && echo "‚úÖ OpenSSL ready" || echo "‚ö†Ô∏è OpenSSL may need installation"
          [ -f /usr/local/bin/pcre2-config ] && echo "‚úÖ PCRE2 ready" || echo "‚ö†Ô∏è PCRE2 may need installation"
          [ -f /usr/local/lib/libz.so ] && echo "‚úÖ Zlib ready" || echo "‚ö†Ô∏è Zlib may need installation"
          
          # Now compile Nginx
          cd /usr/local/bin/enginescript/scripts/install/nginx
          sudo timeout 1200 ./nginx-install.sh 2>&1 | tee /tmp/nginx-install.log || {
            echo "‚ùå Nginx compilation failed or timed out"
            tail -100 /tmp/nginx-install.log
            exit 1
          }
          
          # Verify Nginx binary was created
          if [ -f /usr/sbin/nginx ]; then
            echo "‚úÖ Nginx binary created successfully"
            sudo /usr/sbin/nginx -V
          else
            echo "‚ùå Nginx binary not found"
            exit 1
          fi

      - name: Test PHP Compilation
        if: matrix.component == 'php'
        run: |
          echo "üîß Testing PHP compilation with base EngineScript setup..."
          
          # Verify OpenSSL is available from base setup
          if [ -f /usr/local/ssl/bin/openssl ]; then
            echo "‚úÖ OpenSSL available from base setup"
            /usr/local/ssl/bin/openssl version
          else
            echo "‚ö†Ô∏è OpenSSL not found, may cause PHP compilation issues"
          fi
          
          # Compile PHP
          cd /usr/local/bin/enginescript/scripts/install/php
          sudo timeout 1800 ./php-install.sh 2>&1 | tee /tmp/php-install.log || {
            echo "‚ùå PHP compilation failed or timed out"
            tail -100 /tmp/php-install.log
            exit 1
          }
          
          # Verify PHP was compiled
          if [ -f /usr/local/bin/php ]; then
            echo "‚úÖ PHP binary created successfully"
            sudo /usr/local/bin/php -v
          else
            echo "‚ùå PHP binary not found"
            exit 1
          fi

      - name: Test MariaDB Installation
        if: matrix.component == 'mariadb'
        run: |
          echo "üîß Testing MariaDB installation..."
          cd /usr/local/bin/enginescript/scripts/install/mariadb
          sudo timeout 900 ./mariadb-install.sh 2>&1 | tee /tmp/mariadb-install.log || {
            echo "‚ùå MariaDB installation failed or timed out"
            tail -100 /tmp/mariadb-install.log
            exit 1
          }
          
          # Verify MariaDB was installed
          if [ -f /usr/local/mysql/bin/mysql ]; then
            echo "‚úÖ MariaDB binary created successfully"
            sudo /usr/local/mysql/bin/mysql --version
          else
            echo "‚ùå MariaDB binary not found"
            exit 1
          fi
          
          # Check if MariaDB service is running
          if systemctl is-active --quiet mariadb; then
            echo "‚úÖ MariaDB service is running"
          else
            echo "‚ÑπÔ∏è MariaDB service not running (may be expected in CI)"
          fi

      - name: Test Redis Installation
        if: matrix.component == 'redis'
        run: |
          echo "üîß Testing Redis installation..."
          cd /usr/local/bin/enginescript/scripts/install/redis
          sudo timeout 600 ./redis-install.sh 2>&1 | tee /tmp/redis-install.log || {
            echo "‚ùå Redis installation failed or timed out"
            tail -100 /tmp/redis-install.log
            exit 1
          }
          
          # Verify Redis was installed
          if command -v redis-server &> /dev/null; then
            echo "‚úÖ Redis server installed successfully"
            redis-server --version
          else
            echo "‚ùå Redis server not found"
            exit 1
          fi
          
          # Check if Redis service is running
          if systemctl is-active --quiet redis-server; then
            echo "‚úÖ Redis service is running"
          else
            echo "‚ÑπÔ∏è Redis service not running (may be expected in CI)"
          fi

      - name: Check Disk Space
        if: always()
        run: |
          echo "üíæ Disk space usage:"
          df -h
          echo "üìÅ Large directories:"
          sudo du -sh /tmp/* 2>/dev/null | sort -hr | head -10 || true

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.component }}-ubuntu-24.04
          path: |
            /tmp/*.log
            /var/log/EngineScript/
          retention-days: 7

  nginx-specific-test:
    name: Nginx Compilation Test
    runs-on: ubuntu-24.04
    if: ${{ github.event.inputs.test_scope == 'nginx-only' || (github.event_name == 'pull_request' && needs.determine-test-scope.outputs.run_nginx_specific == 'true') }}
    needs: 
      - validate-scripts
      - determine-test-scope
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Environment for Nginx Test
        run: |
          # Free up space
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          
          # Update and install dependencies
          sudo apt-get update
          sudo apt-get install -y build-essential wget curl git cmake autoconf automake libtool pkg-config pwgen boxes
          
          # Create directory structure
          sudo mkdir -p /usr/local/bin/enginescript /home/EngineScript /var/log/EngineScript
          sudo cp -r scripts/ /usr/local/bin/enginescript/
          sudo cp enginescript-variables.txt /usr/local/bin/enginescript/
          sudo cp .github/ci-config/enginescript-install-options-ci.txt /home/EngineScript/enginescript-install-options.txt
          sudo find /usr/local/bin/enginescript -type f -name "*.sh" -exec chmod +x {} \;

      - name: Test Nginx with Different Configurations
        run: |
          echo "üîß Testing Nginx compilation with CPU detection..."
          
          # Test the CPU detection functionality
          cd /usr/local/bin/enginescript/scripts/install/nginx
          
          # Install minimal dependencies for Nginx
          sudo apt-get install -y libssl-dev zlib1g-dev libpcre3-dev
          
          # Test Nginx compilation with automatic CPU detection
          sudo timeout 1200 ./nginx-install.sh 2>&1 | tee /tmp/nginx-auto.log
          
          # Verify the build
          if [ -f /usr/sbin/nginx ]; then
            echo "‚úÖ Nginx with auto CPU detection successful"
            sudo /usr/sbin/nginx -V 2>&1 | grep -E "(configure arguments|built with)"
          else
            echo "‚ùå Nginx compilation failed"
            tail -50 /tmp/nginx-auto.log
            exit 1
          fi

      - name: Test Nginx Modules
        run: |
          echo "üîß Testing Nginx modules..."
          sudo /usr/sbin/nginx -V 2>&1 | grep -o 'with-[^[:space:]]*' | sort
          
          # Check for key modules
          sudo /usr/sbin/nginx -V 2>&1 | grep -q "http_ssl_module" && echo "‚úÖ SSL module found" || echo "‚ùå SSL module missing"
          sudo /usr/sbin/nginx -V 2>&1 | grep -q "http_v2_module" && echo "‚úÖ HTTP/2 module found" || echo "‚ùå HTTP/2 module missing"
          sudo /usr/sbin/nginx -V 2>&1 | grep -q "http_gzip_module" && echo "‚úÖ Gzip module found" || echo "‚ùå Gzip module missing"

  mariadb-specific-test:
    name: MariaDB Installation Test
    runs-on: ubuntu-24.04
    if: ${{ github.event.inputs.test_scope == 'mariadb-only' || (github.event_name == 'pull_request' && needs.determine-test-scope.outputs.run_mariadb_specific == 'true') }}
    needs: 
      - validate-scripts
      - determine-test-scope
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Environment for MariaDB Test
        run: |
          # Free up space
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          
          # Update and install dependencies
          sudo apt-get update
          sudo apt-get install -y build-essential wget curl git pwgen boxes
          
          # Create directory structure
          sudo mkdir -p /usr/local/bin/enginescript /home/EngineScript /var/log/EngineScript
          sudo cp -r scripts/ /usr/local/bin/enginescript/
          sudo cp enginescript-variables.txt /usr/local/bin/enginescript/
          sudo cp .github/ci-config/enginescript-install-options-ci.txt /home/EngineScript/enginescript-install-options.txt
          sudo find /usr/local/bin/enginescript -type f -name "*.sh" -exec chmod +x {} \;

      - name: Test MariaDB Installation
        run: |
          echo "üîß Testing MariaDB installation..."
          cd /usr/local/bin/enginescript/scripts/install/mariadb
          sudo timeout 1200 ./mariadb-install.sh 2>&1 | tee /tmp/mariadb-install.log || {
            echo "‚ùå MariaDB installation failed or timed out"
            tail -100 /tmp/mariadb-install.log
            exit 1
          }
          
          # Verify MariaDB was installed
          if [ -f /usr/local/mysql/bin/mysql ]; then
            echo "‚úÖ MariaDB binary installed successfully"
            sudo /usr/local/mysql/bin/mysql --version
          else
            echo "‚ùå MariaDB binary not found"
            exit 1
          fi

      - name: Test MariaDB Configuration
        run: |
          echo "üîß Testing MariaDB configuration..."
          
          # Check if MariaDB config exists
          [ -f /etc/my.cnf ] && echo "‚úÖ MariaDB config found" || echo "‚ÑπÔ∏è MariaDB config not in expected location"
          
          # Test MariaDB tuning script if it exists
          cd /usr/local/bin/enginescript/scripts/install/mariadb
          if [ -f "./mariadb-tune.sh" ]; then
            echo "üîß Testing MariaDB tuning script..."
            sudo ./mariadb-tune.sh 2>&1 | tee /tmp/mariadb-tune.log || echo "‚ö†Ô∏è MariaDB tuning had issues"
          fi

  redis-specific-test:
    name: Redis Installation Test
    runs-on: ubuntu-24.04
    if: ${{ github.event.inputs.test_scope == 'redis-only' || (github.event_name == 'pull_request' && needs.determine-test-scope.outputs.run_redis_specific == 'true') }}
    needs: [validate-scripts, determine-test-scope]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Environment for Redis Test
        run: |
          # Free up space
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          
          # Update and install dependencies
          sudo apt-get update
          sudo apt-get install -y build-essential wget curl git pwgen boxes
          
          # Create directory structure
          sudo mkdir -p /usr/local/bin/enginescript /home/EngineScript /var/log/EngineScript
          sudo cp -r scripts/ /usr/local/bin/enginescript/
          sudo cp enginescript-variables.txt /usr/local/bin/enginescript/
          sudo cp .github/ci-config/enginescript-install-options-ci.txt /home/EngineScript/enginescript-install-options.txt
          sudo find /usr/local/bin/enginescript -type f -name "*.sh" -exec chmod +x {} \;

      - name: Test Redis Installation
        run: |
          echo "üîß Testing Redis installation..."
          cd /usr/local/bin/enginescript/scripts/install/redis
          sudo timeout 600 ./redis-install.sh 2>&1 | tee /tmp/redis-install.log || {
            echo "‚ùå Redis installation failed or timed out"
            tail -100 /tmp/redis-install.log
            exit 1
          }
          
          # Verify Redis was installed
          if command -v redis-server &> /dev/null; then
            echo "‚úÖ Redis server installed successfully"
            redis-server --version
          else
            echo "‚ùå Redis server not found"
            exit 1
          fi

      - name: Test Redis Configuration
        run: |
          echo "üîß Testing Redis configuration..."
          
          # Check if Redis config exists
          [ -f /etc/redis/redis.conf ] && echo "‚úÖ Redis config found" || echo "‚ÑπÔ∏è Redis config not in expected location"
          
          # Test Redis connectivity (if service is running)
          if systemctl is-active --quiet redis-server; then
            echo "‚úÖ Redis service is running, testing connectivity..."
            redis-cli ping && echo "‚úÖ Redis responds to ping" || echo "‚ö†Ô∏è Redis ping failed"
          else
            echo "‚ÑπÔ∏è Redis service not running (may be expected in CI)"
          fi

  full-build-test:
    name: Full EngineScript Build Test
    runs-on: ubuntu-24.04
    if: ${{ github.event.inputs.test_scope == 'full' }}
    needs: validate-scripts
    timeout-minutes: 180
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Maximize Disk Space
        run: |
          # Free up maximum disk space for full build
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/graalvm
          sudo rm -rf /usr/local/.ghcup
          sudo docker system prune -af
          sudo apt-get autoremove -y
          sudo apt-get autoclean
          df -h

      - name: Setup Full Build Environment
        run: |
          sudo apt-get update
          sudo mkdir -p /usr/local/bin/enginescript /home/EngineScript /var/log/EngineScript
          sudo cp -r . /usr/local/bin/enginescript/
          sudo cp .github/ci-config/enginescript-install-options-ci.txt /home/EngineScript/enginescript-install-options.txt
          
          # Create a modified install script that skips problematic parts for CI
          sudo cp scripts/install/enginescript-install.sh /usr/local/bin/enginescript/scripts/install/enginescript-install-ci.sh
          
          # Modify the CI install script to skip certain steps
          sudo sed -i 's/sleep 5/echo "Skipping sleep in CI"/' /usr/local/bin/enginescript/scripts/install/enginescript-install-ci.sh
          sudo sed -i 's/read -p/#read -p/' /usr/local/bin/enginescript/scripts/install/enginescript-install-ci.sh
          
          sudo find /usr/local/bin/enginescript -type f -name "*.sh" -exec chmod +x {} \;

      - name: Run Full EngineScript Build (Limited)
        run: |
          echo "üöÄ Starting full EngineScript build test..."
          
          # Set timeout and run with limited scope
          cd /usr/local/bin/enginescript
          sudo timeout 10800 ./scripts/install/enginescript-install-ci.sh 2>&1 | tee /tmp/full-build.log || {
            echo "‚ùå Full build failed or timed out"
            echo "üìä Last 100 lines of build log:"
            tail -100 /tmp/full-build.log
            
            echo "üìä Error log if exists:"
            [ -f /var/log/EngineScript/install-error-log.txt ] && tail -50 /var/log/EngineScript/install-error-log.txt
            
            echo "üíæ Disk usage:"
            df -h
            exit 1
          }

      - name: Verify Full Build Results
        if: always()
        run: |
          echo "üîç Verifying build results..."
          
          # Check if key binaries exist
          [ -f /usr/sbin/nginx ] && echo "‚úÖ Nginx installed" || echo "‚ùå Nginx missing"
          [ -f /usr/local/bin/php ] && echo "‚úÖ PHP installed" || echo "‚ùå PHP missing"
          [ -f /usr/local/mysql/bin/mysql ] && echo "‚úÖ MariaDB installed" || echo "‚ùå MariaDB missing"
          
          # Check services (if they were started)
          systemctl is-active nginx && echo "‚úÖ Nginx service active" || echo "‚ÑπÔ∏è Nginx service not active (expected in CI)"
          systemctl is-active php8.3-fpm && echo "‚úÖ PHP-FPM service active" || echo "‚ÑπÔ∏è PHP-FPM service not active (expected in CI)"
          
          echo "üìÅ Directory structure:"
          ls -la /usr/local/bin/enginescript/ || true
          ls -la /etc/nginx/ || true

  report-results:
    name: Report Test Results
    runs-on: ubuntu-24.04
    needs: [validate-scripts, component-build-test, nginx-specific-test, mariadb-specific-test, redis-specific-test, full-build-test]
    if: always()
    
    steps:
      - name: Create Test Report
        run: |
          echo "# EngineScript Build Test Report" > test-report.md
          echo "" >> test-report.md
          echo "## Test Summary" >> test-report.md
          echo "- **Validation**: ${{ needs.validate-scripts.result }}" >> test-report.md
          echo "- **Component Tests**: ${{ needs.component-build-test.result }}" >> test-report.md
          echo "- **Nginx Specific**: ${{ needs.nginx-specific-test.result }}" >> test-report.md
          echo "- **MariaDB Specific**: ${{ needs.mariadb-specific-test.result }}" >> test-report.md
          echo "- **Redis Specific**: ${{ needs.redis-specific-test.result }}" >> test-report.md
          echo "- **Full Build**: ${{ needs.full-build-test.result }}" >> test-report.md
          echo "" >> test-report.md
          echo "## Workflow Details" >> test-report.md
          echo "- **Trigger**: ${{ github.event_name }}" >> test-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> test-report.md
          echo "- **Commit**: ${{ github.sha }}" >> test-report.md
          echo "- **Test Scope**: ${{ github.event.inputs.test_scope || 'component' }}" >> test-report.md
          
          cat test-report.md

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
