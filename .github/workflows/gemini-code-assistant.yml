# Gemini AI-Powered Code Analysis
# Analyzes code changes in PRs, pushes, and branches - FOCUSES ON CODE CHANGES

name: AI Code Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop, 'feature/*', 'bugfix/*']
  workflow_dispatch:

# Cancel previous workflow runs for the same context
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-analysis:
    name: AI Analysis & Assistant
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js for Google AI SDK
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Get Code Changes
        id: get-changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EVENT_NAME: ${{ github.event_name }}
          BASE_SHA: ${{ github.event.before || '' }}
          HEAD_SHA: ${{ github.sha }}
          REPO_FULL_NAME: ${{ github.repository }}
        run: |
          echo "üìã Collecting code changes for analysis..."
          echo "üîç Debug info: BASE_SHA=$BASE_SHA, HEAD_SHA=$HEAD_SHA"
          
          if [ "$EVENT_NAME" = "pull_request" ]; then
            # For PRs, use git diff as primary method
            PR_BASE_SHA="${{ github.event.pull_request.base.sha }}"
            PR_HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            echo "üîç PR Debug: BASE=$PR_BASE_SHA, HEAD=$PR_HEAD_SHA"
            
            # Use git diff as PRIMARY method (more reliable)
            echo "üîß Using git diff (primary method)..."
            if git diff "$PR_BASE_SHA".."$PR_HEAD_SHA" > code_changes.diff 2>git_error.log; then
              echo "‚úÖ Git diff successful - collected $(wc -l < code_changes.diff) lines"
            else
              echo "‚ùå Git diff failed, trying GitHub API as fallback..."
              cat git_error.log 2>/dev/null || echo "No git error details"
              
              # GitHub API as fallback
              curl -s -H "Authorization: token $GITHUB_TOKEN" \
                   -H "Accept: application/vnd.github.v3.diff" \
                   "https://api.github.com/repos/$REPO_FULL_NAME/compare/$PR_BASE_SHA..$PR_HEAD_SHA" \
                   > code_changes.diff
                   
              if [ -s code_changes.diff ]; then
                echo "‚úÖ GitHub API fallback successful"
              else
                echo "‚ùå Both methods failed for PR"
              fi
            fi
            
          elif [ "$EVENT_NAME" = "push" ]; then
            # For pushes, get the diff from the previous commit
            if [ -n "$BASE_SHA" ] && [ "$BASE_SHA" != "0000000000000000000000000000000000000000" ]; then
              echo "üîç Push Debug: Comparing $BASE_SHA to $HEAD_SHA"
              
              # Use git diff as PRIMARY method (more reliable)
              echo "üîß Using git diff (primary method)..."
              if git diff "$BASE_SHA".."$HEAD_SHA" > code_changes.diff 2>git_error.log; then
                echo "‚úÖ Git diff successful - collected $(wc -l < code_changes.diff) lines"
              else
                echo "‚ùå Git diff failed, trying GitHub API as fallback..."
                cat git_error.log 2>/dev/null || echo "No git error details"
                
                # GitHub API as fallback only
                echo "üåê Attempting GitHub API diff as fallback..."
                echo "üîç URL: https://api.github.com/repos/$REPO_FULL_NAME/compare/$BASE_SHA..$HEAD_SHA"
                
                HTTP_CODE=$(curl -s -w "%{http_code}" \
                     -H "Authorization: token $GITHUB_TOKEN" \
                     -H "Accept: application/vnd.github.v3.diff" \
                     "https://api.github.com/repos/$REPO_FULL_NAME/compare/$BASE_SHA..$HEAD_SHA" \
                     -o code_changes.diff 2>api_error.log)
                
                if [ "$HTTP_CODE" = "200" ] && [ -s code_changes.diff ]; then
                  echo "‚úÖ GitHub API fallback successful"
                else
                  echo "‚ùå GitHub API also failed (HTTP $HTTP_CODE)"
                fi
              fi
              
              # Final fallback: git show if no diff available
              if [ ! -s code_changes.diff ]; then
                echo "‚ö†Ô∏è No diff available, showing recent commit changes..."
                echo "üîß Running: git show --stat $HEAD_SHA"
                git show --stat "$HEAD_SHA" > code_changes.diff 2>>git_error.log
                echo "" >> code_changes.diff
                git show "$HEAD_SHA" >> code_changes.diff 2>>git_error.log
                
                if [ -s code_changes.diff ]; then
                  echo "‚úÖ Git show successful as final fallback"
                else
                  echo "‚ùå All methods failed - no code changes available"
                fi
              fi
            else
              echo "üìÑ Initial commit or no previous commit - showing current files..."
              git show --name-only $HEAD_SHA | head -10 | while read file; do
                if [ -f "$file" ]; then
                  echo "=== $file ===" >> code_changes.diff
                  head -50 "$file" >> code_changes.diff
                  echo "" >> code_changes.diff
                fi
              done
            fi
          else
            echo "No code changes available for this event type" > code_changes.diff
          fi
          
          # Check if we got changes
          if [ -s code_changes.diff ]; then
            echo "‚úÖ Code changes collected: $(wc -l < code_changes.diff) lines"
            echo "changes-available=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è No code changes found"
            echo "changes-available=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Google AI SDK and Create Analysis Script
        run: |
          echo "üîß Installing Google AI SDK..."
          npm install @google/generative-ai
          
          echo "üì¶ Creating Gemini analysis script..."
          cat > gemini-analyze.js << 'SCRIPT_EOF'
          const { GoogleGenerativeAI } = require('@google/generative-ai');
          const fs = require('fs');
          
          async function analyzeCode() {
            try {
              const apiKey = process.env.GEMINI_API_KEY;
              if (!apiKey) {
                throw new Error('GEMINI_API_KEY environment variable not found');
              }
              
              console.log('üîë API key configured, length:', apiKey.length);
              console.log('ü§ñ Initializing Gemini AI...');
              
              const genAI = new GoogleGenerativeAI(apiKey);
              
              // Try different model names prioritizing quality first, then fallback on rate limits
              // Order: 2.5 models (highest quality) -> 2.0 models (higher RPM) -> legacy
              const modelNames = [
                "gemini-2.5-pro",             // 5 RPM, 250K TPM - Highest quality
                "gemini-2.5-flash",           // 10 RPM, 250K TPM - Best 2.5 balance
                "gemini-2.5-flash-preview",   // 10 RPM, 250K TPM - Latest 2.5 features
                "gemini-2.5-flash-lite",      // 15 RPM, 250K TPM - Faster 2.5
                "gemini-2.5-flash-lite-preview", // 15 RPM, 250K TPM - Latest 2.5 lite
                "gemini-2.0-flash",           // 15 RPM, 1M TPM - Good 2.0 balance
                "gemini-2.0-flash-lite",      // 30 RPM, 1M TPM - Highest RPM fallback
                "gemini-1.5-flash",           // 15 RPM, 250K TPM - DEPRECATED fallback
                "gemini-pro"                  // Legacy final fallback
              ];
              
              let model = null;
              let modelUsed = null;
              
              for (const modelName of modelNames) {
                try {
                  console.log('üîß Trying model:', modelName);
                  model = genAI.getGenerativeModel({ model: modelName });
                  
                  // Test the model with a small request to check availability/rate limits
                  console.log('üß™ Testing model availability...');
                  await model.generateContent("test");
                  
                  modelUsed = modelName;
                  console.log('‚úÖ Successfully initialized and tested model:', modelName);
                  break;
                } catch (modelError) {
                  console.log('‚ùå Model', modelName, 'failed:', modelError.message);
                  
                  // Check for rate limit errors specifically
                  if (modelError.message && (
                    modelError.message.includes('rate limit') || 
                    modelError.message.includes('quota') ||
                    modelError.message.includes('429') ||
                    modelError.status === 429
                  )) {
                    console.log('‚ö†Ô∏è Rate limit detected, trying next model with higher RPM...');
                  } else if (modelError.message && modelError.message.includes('404')) {
                    console.log('‚ö†Ô∏è Model not found, trying next available model...');
                  }
                  continue;
                }
              }
              
              if (!model) {
                throw new Error('No supported Gemini model could be initialized');
              }
              
              const prompt = fs.readFileSync('analysis_prompt.txt', 'utf8');
              console.log('üìù Prompt loaded, size:', prompt.length, 'characters');
              
              console.log('üöÄ Generating analysis with model:', modelUsed);
              const result = await model.generateContent(prompt);
              const response = await result.response;
              const text = response.text();
              
              fs.writeFileSync('ai_analysis_result.txt', text);
              console.log('‚úÖ Analysis completed successfully');
              console.log('üìÑ Result size:', text.length, 'characters');
              console.log('ü§ñ Model used:', modelUsed);
              
            } catch (error) {
              console.error('‚ùå Gemini analysis failed:', error.message);
              console.error('üîç Full error details:', error);
              
              const fallbackContent = [
                '## ü§ñ AI Analysis Status',
                '',
                'The automated AI analysis encountered an issue: ' + error.message,
                '',
                'This may be due to:',
                '- API key configuration issues',
                '- Network connectivity problems',
                '- Gemini API rate limits or service issues',
                '- Invalid prompt format or size',
                '',
                '### Manual Review Recommended',
                'Please conduct a manual code review focusing on:',
                '- Linux security best practices',
                '- Bash scripting standards compliance',
                '- LEMP stack performance considerations',
                '- Server automation requirements',
                '- Nginx, PHP, MariaDB, Redis security configurations',
                '',
                'The PR can still be reviewed and merged based on manual inspection.'
              ].join('\n');
              
              fs.writeFileSync('ai_analysis_result.txt', fallbackContent);
              process.exit(1);
            }
          }
          
          analyzeCode().catch(error => {
            console.error('Fatal error:', error);
            process.exit(1);
          });
          SCRIPT_EOF
          
          echo "‚úÖ Analysis script created successfully"

      - name: Create Analysis Prompt
        env:
          PR_TITLE: ${{ github.event.pull_request.title || format('Push Analysis - {0}', github.ref_name) }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login || github.actor }}
          CHANGES_AVAILABLE: ${{ steps.get-changes.outputs.changes-available }}
        run: |
          echo "üìù Creating analysis prompt..."
          echo "You are an expert Linux system administrator, bash scripting specialist, and LEMP stack automation consultant." > analysis_prompt.txt
          echo "" >> analysis_prompt.txt
          echo "CRITICAL INSTRUCTION: FOCUS ON THE CODE CHANGES AND PROVIDE SECURITY AND CONFIGURATION ANALYSIS." >> analysis_prompt.txt
          echo "Analyze what was changed, added, or removed and review those specific server automation modifications." >> analysis_prompt.txt
          echo "" >> analysis_prompt.txt
          echo "Context: $PR_TITLE by @$PR_AUTHOR" >> analysis_prompt.txt
          echo "" >> analysis_prompt.txt
          echo "Please analyze this EngineScript server automation code for:" >> analysis_prompt.txt
          echo "1. Security vulnerabilities in bash scripts and server configurations" >> analysis_prompt.txt
          echo "2. Linux system administration best practices compliance" >> analysis_prompt.txt
          echo "3. LEMP stack performance and security considerations" >> analysis_prompt.txt
          echo "4. Server automation and deployment best practice recommendations" >> analysis_prompt.txt
          echo "5. Nginx, PHP, MariaDB, and Redis configuration correctness" >> analysis_prompt.txt
          echo "6. Cloudflare integration and SSL/TLS security" >> analysis_prompt.txt
          echo "" >> analysis_prompt.txt
          echo "Provide specific, actionable feedback for server administration improvements." >> analysis_prompt.txt
          echo "" >> analysis_prompt.txt
          
          # Add the actual code changes
          if [ "$CHANGES_AVAILABLE" = "true" ]; then
            echo "Here are the code changes to analyze:" >> analysis_prompt.txt
            echo "" >> analysis_prompt.txt
            cat code_changes.diff >> analysis_prompt.txt
          else
            echo "No code changes were detected in this commit." >> analysis_prompt.txt
          fi

      - name: Run AI Analysis
        id: ai-analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "ü§ñ Starting AI analysis with official Google SDK..."
          echo "üìù Prompt file size: $(wc -c < analysis_prompt.txt) bytes"
          
          if node gemini-analyze.js; then
            echo "analysis-success=true" >> $GITHUB_OUTPUT
            echo "‚úÖ AI analysis completed successfully"
          else
            echo "analysis-success=false" >> $GITHUB_OUTPUT
            echo "‚ùå AI analysis failed - check logs for details"
          fi

      - name: Output Analysis Results
        env:
          PR_NUMBER: ${{ github.event.number || '' }}
          IS_PR: ${{ github.event_name == 'pull_request' }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          echo "üìä Analysis Results for $EVENT_NAME event:"
          echo "============================================================"
          
          if [ -f ai_analysis_result.txt ]; then
            cat ai_analysis_result.txt
          else
            echo "‚ùå Analysis result file not found"
          fi
          
          echo "============================================================"
          echo "‚úÖ Analysis output complete"

      - name: Create GitHub Annotations and Summary
        if: always()
        env:
          ANALYSIS_SUCCESS: ${{ steps.ai-analysis.outputs.analysis-success }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          echo "üìù Creating GitHub annotations and job summary..."
          
          # Create job summary with analysis results
          echo "## ü§ñ AI Code Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** $EVENT_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** $([ "$ANALYSIS_SUCCESS" = "true" ] && echo "‚úÖ Success" || echo "‚ö†Ô∏è Warning")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f ai_analysis_result.txt ]; then
            # Add analysis results to job summary
            echo "### Analysis Details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat ai_analysis_result.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Create GitHub annotations for key findings
            echo "üîç Creating annotations for key findings..."
            
            # Create notice annotation with summary
            echo "::notice title=AI Analysis Complete::EngineScript LEMP automation analysis completed for $EVENT_NAME event. Check job summary for detailed results."
            
            # Parse analysis results for security issues and create annotations
            if grep -qi "security\|vulnerability\|exploit\|injection\|privilege escalation\|unsafe\|hardening" ai_analysis_result.txt 2>/dev/null; then
              echo "::warning title=Security Review Required::AI analysis detected potential security concerns in bash scripts or server configuration. Review analysis details in job summary."
            fi
            
            # Check for bash scripting best practices
            if grep -qi "bash\|shell\|script\|quoting\|variable expansion\|error handling\|set -e" ai_analysis_result.txt 2>/dev/null; then
              echo "::notice title=Bash Scripting Standards::AI analysis found bash scripting recommendations. Check job summary for best practices."
            fi
            
            # Check for nginx configuration issues
            if grep -qi "nginx\|configuration\|directive\|server block\|location block\|ssl\|tls" ai_analysis_result.txt 2>/dev/null; then
              echo "::notice title=Nginx Configuration::AI analysis found nginx configuration recommendations. Check job summary for details."
            fi
            
            # Check for performance and optimization issues
            if grep -qi "performance\|optimization\|slow\|inefficient\|caching\|redis\|opcache" ai_analysis_result.txt 2>/dev/null; then
              echo "::notice title=Performance Optimization::AI analysis found LEMP stack performance optimization opportunities. Check job summary for details."
            fi
            
            # Check for PHP configuration issues
            if grep -qi "php\|php-fpm\|php.ini\|memory_limit\|upload_max\|post_max" ai_analysis_result.txt 2>/dev/null; then
              echo "::notice title=PHP Configuration::AI analysis found PHP/PHP-FPM configuration recommendations. Check job summary for details."
            fi
            
            # Check for MariaDB/MySQL issues
            if grep -qi "mariadb\|mysql\|database\|sql\|innodb\|query" ai_analysis_result.txt 2>/dev/null; then
              echo "::notice title=Database Configuration::AI analysis found MariaDB configuration recommendations. Check job summary for details."
            fi
            
            # Check for Cloudflare integration issues
            if grep -qi "cloudflare\|cdn\|dns\|real.*ip\|proxy" ai_analysis_result.txt 2>/dev/null; then
              echo "::notice title=Cloudflare Integration::AI analysis found Cloudflare integration recommendations. Check job summary for details."
            fi
            
            # Check for system administration best practices
            if grep -qi "systemd\|service\|permissions\|ownership\|chmod\|chown\|directory structure" ai_analysis_result.txt 2>/dev/null; then
              echo "::notice title=System Administration::AI analysis found system administration recommendations. Check job summary for details."
            fi
            
            # Extract specific line-by-line feedback if available
            if grep -E "line [0-9]+|:[0-9]+:" ai_analysis_result.txt 2>/dev/null; then
              echo "::notice title=Line-Specific Feedback::AI analysis provided line-specific recommendations for bash scripts. See job summary for details."
            fi
            
            # Check analysis length and create appropriate annotation
            ANALYSIS_SIZE=$(wc -c < ai_analysis_result.txt)
            if [ "$ANALYSIS_SIZE" -gt 1000 ]; then
              echo "::notice title=Detailed Analysis Available::Comprehensive AI analysis completed ($ANALYSIS_SIZE characters). Full results available in job summary."
            else
              echo "::notice title=Quick Analysis Complete::AI analysis completed with brief feedback. See job summary for details."
            fi
            
          else
            echo "### ‚ùå Analysis Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The AI analysis could not be completed. This may be due to:" >> $GITHUB_STEP_SUMMARY
            echo "- API configuration issues" >> $GITHUB_STEP_SUMMARY
            echo "- Network connectivity problems" >> $GITHUB_STEP_SUMMARY
            echo "- Service availability" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please conduct manual code review." >> $GITHUB_STEP_SUMMARY
            
            echo "::error title=AI Analysis Failed::Unable to complete automated analysis. Manual review required."
          fi
          
          echo "‚úÖ GitHub annotations and summary created successfully"